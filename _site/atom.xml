<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Takehiro Mouri - Ruby on Rails Developer</title>
    <link type="application/atom+xml" rel="self" href="https://www.takehiromouri.com/atom.xml"/>
  
  <link href="https://www.takehiromouri.com/"/>
  <id>https://www.takehiromouri.com/</id>
  <updated>2016-11-12T01:14:24Z</updated>
  <author>
    <name>Takehiro Mouri</name>
    <email>takehiromouri@gmail.com</email>
  </author>
  <rights type="text">Copyright © 2016 Takehiro Mouri. All rights reserved.</rights>
  
  <entry>
  <title type="text">Longer Work Hours vs Shorter Work Hours</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Longer-Work-Hours-vs-Shorter-Work-Hours.html" />
  <id>https://www.takehiromouri.com/Longer-Work-Hours-vs-Shorter-Work-Hours</id>
  <published>2016-11-12T00:00:00Z</published>
  <updated>2016-11-12T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>Lately I&rsquo;ve been thinking about a few things about time:</p>

<p>It&rsquo;s really common in Japan to say that you should be working at 100% horsepower with only 3 hours of sleep a day. And as a matter of fact, it seems many successful people do operate and even insist on such sleep schedules.</p>

<p>It seems that a lot of Japanese workers try to maximize the amount of output they produce, as well as the time they put in producing that output. The basic idea is simple: Maximum output per time unit multiplied by maximum time put in work yields maximum results.</p>

<p>On the other hand, I do agree with the thoughts of DHH and Jason Fried on how you should try to maximize your working hours, not necessarily try to enlong it. Jason Fried&rsquo;s argument in &ldquo;Rework&rdquo; was that most people&rsquo;s working hours are shitty hours and that you only need short bursts of concetrated work time to get things done.</p>

<p>His argument is that maximum output can only be achieved for limited amounts of time throughout the day. Instead of trying to spend more time with diluted quality, his argument is to spend less time working, but with 100% quality. So quality over quantity.</p>

<p>Tim Ferris&rsquo;s famous Four-Hour Work Week also proposed a similar theme - effectiveness and efficiency are two different things. It doesn&rsquo;t matter if you are efficient if you are working on the wrong things.</p>

<p>I&rsquo;ve found that personally as an individual that works in a rather creative field, the latter argument is more convincing and is more practical. I&rsquo;m sure science can back it up as well.</p>

<ul>
<li><strong>When I&rsquo;m tired I tend to produce sloppy output</strong>. It might seem great at the time because of the adrenaline, but when I look at it with fresh eyes, it tends to be subpar quality.</li>
<li>If I&rsquo;m focused on being productive 100% of the time, <strong>I end up not prioritizing</strong>. I feel that because I am determined to be productive 100% of the time, I have more time, thus I don&rsquo;t feel the need to prioritize.</li>
<li><strong>I find it impossible to maximize productivity when my brain is fried.</strong> (I think that is where the &ldquo;Maximum output per time unit multiplied by maximum time put in work equals maximum results.&rdquo; forumla may be flawed)</li>
<li><strong>I make worse decisions when my brain is fried</strong></li>
</ul>


<p>It seems that if one is engaged in simple tasks throughout the day, maximizing work time and trying to stretch the output per time unit might work to some extent.</p>

<p>On the other hand, if you&rsquo;re a creative guy or girl, that won&rsquo;t really work - <strong>your creative mind is what will get the job done</strong>. Frying your creative mind definitely won&rsquo;t do the job.</p>

<p>The problem is that for people like me, I <em>like</em> to work. I love to code and I would do it all day long. I always think that the key to improving is to code more, read more, experiment more - even if it means sacrificing a few hours of sleep.</p>

<p>Lately, I&rsquo;ve been following these internal guidelines, which seem to be practical for people like me:</p>

<ul>
<li>I allow myself to binge code a few times a month</li>
<li>When I start working on something new, I lock myself up and allow myself to lose a few hours of sleep to get in the state of flow</li>
<li>When I start feeling tired/burnt out, I take it easy for a few days until I feel fresh again</li>
<li>Before starting anything, I try to be super clear about what I&rsquo;m going to try to accomplish</li>
</ul>


<p>For people like me who want to maximize output, <strong>it seems that the key is realizing that maximizing output can be achieved far better by sleeping more, prioritizing, and trying to work more quality hours.</strong></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">The Non Designer's Design Book</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/The-Non-Designers-Design-Book.html" />
  <id>https://www.takehiromouri.com/The-Non-Designers-Design-Book</id>
  <published>2016-10-30T00:00:00Z</published>
  <updated>2016-10-30T00:00:00Z</updated>
  <content type="html"><![CDATA[ <ul>
<li>The principle of proximity - group related items together</li>
<li><p>Items that are not related to each other should not be positioned close to each other</p></li>
<li><p>As in life, <strong>proximity implies a relationship</strong></p></li>
<li><p>The basic purpose of alignment is to unify and organize</p></li>
<li><p>Avoid using more than one alignment</p></li>
<li><p>In order for contrast to work, the contrasting elements must be not just slightly differently, but <strong>very</strong> different</p></li>
</ul>

 ]]></content>
</entry>


  <entry>
  <title type="text">Answers To Some Questions by TECHRISE Students</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Answers-to-some-questions-by-TECHRISE-Students.html" />
  <id>https://www.takehiromouri.com/Answers-to-some-questions-by-TECHRISE-Students</id>
  <published>2016-10-23T00:00:00Z</published>
  <updated>2016-10-23T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>TECHRISE students came up with a bunch of great questions to be answered by a Paypal engineer friend. I&rsquo;m going to interview her later this week, but I thought why not give my own thoughts on these questions as well :)</p>

<p>I couldn&rsquo;t cover everyone&rsquo;s questions, but here&rsquo;s my take on some of them.</p>

<h3>When I check out the foreign students, they seem to be getting better education in an IT field and they actually start learning coding or designing from the very young age. For a developing country like Nepal, even for me, I could access the Internet after 12 grade only. How can we compete with the young and talented and more practiced student in IT field if we have to get better than them?</h3>

<p>-Sujan J.</p>

<p>Although starting from a young age might correlate somewhat with your ability to write code, there are many people who have started programming after college and are great programmers. Initially the key to getting better at programming is writing as much code as you possibly can, but at a certain point, <strong>it is more about the type of content and information you expose yourself to</strong>, of which many are free online. In other words, read a lot of good books programming related or non-programming related and expose yourself to more ideas and more knowledge.</p>

<p>On that note, I’m starting to compile a list of resources that I think are really good (list is incomplete):</p>

<p><a href="https://github.com/takehiromouri/startup_resources">Startup Resources</a></p>

<p><a href="https://github.com/takehiromouri/programming_resources">Programming Resources</a></p>

<p>Another thing to note is that <strong>being a whiz programmer doesn’t always mean that you are the most valuable programmer in the company</strong> - the person who contributes most to the business and can solve problems most is the person who will be valued the most :)</p>

<p><strong>In the end, our job as programmers is to solve business problems, not to write unnecessary complicated algorithms.</strong></p>

<h3>What does it take to make a startup into a successful business?</h3>

<p>-Yankee M.</p>

<p>I don’t think we can call TECHRISE a successful business just yet, but I believe that it’s really about trying your best to provide as much value as you can to your customers in a way that others can’t. And to do so, it most likely takes tremendous amount of hard work, diligence, and persistence.</p>

<p>We also try different things out and see what works and what doesn&rsquo;t. We try to study how we can provide value and how we can provide value to more people as well.</p>

<h3>What problem-solving skills do you think will help the most once you enter the real market?</h3>

<p>-Yankee M.</p>

<p>In terms of software engineering, I think the ability to solve your own problems and learn new things on the fly is really important, since technologies are changing constantly. Another thing that is really important is to be able to communicate well.</p>

<h3>How&rsquo;s Ruby on Rails stacking up against other languages/frameworks in Startups and big companies?</h3>

<p>-Yankee M.</p>

<p>In Japan, there is an enormous amount of Startups using Ruby on Rails. I’d say 80% ~ 90% of the startups that I see are using Ruby on Rails.
In the US, it really depends on what kind of startup it is, but using Ruby on Rails backend is really popular. Node.js is extremely popular as well, but there seems to be tons of backlash against JavaScript in general because of a lot of reason (google “JavaScript fatigue” for more information).</p>

<p>For big companies, it really depends but Java is seems to be pretty strong is what I hear a lot.</p>

<h3>How to stop jumping from framework to framework and become a real programmer not just a developer?</h3>

<p>-Rabin S.</p>

<p>Start building a big project or join/intern at a company. When you start an ambitious project, you’re forced to learn more deeply about advanced topics on your own. The hard part is getting to the part where you can actually learn the things on your own, but that’s why TECHRISE is here :)</p>

<p>You can never learning 100% everything about a framework and furthermore, it’s not just about frameworks, you need to learn about software engineering principles, how to write modular and reusable code, etc.</p>

<h3>Why is php getting less popular?</h3>

<p>-Rojan S.</p>

<p>I think there are a lot of reasons, but what I hear a lot is that PHP has a negative image for stringy, bad code.</p>

<p>Although I’ve never written in PHP, the more reliable sources of information that I’ve read say that PHP itself isn’t bad, but it’s just the people who write it are not always the best. It’s just a matter of probability, because the barrier to entry for PHP is so low. It’s a really easy framework to get started with, thus you have beginner programmers writing really bad code, which leads to the image of PHP = bad code.</p>

<p>The other factor is that other frameworks like Ruby on Rails or Node.js offer traits that lead to more developers using it. For instance, Ruby on Rails = Programmer Happiness and Node.js = Fast and good for streaming. When the growing companies start to use these newer technologies, more people get interested, and as a result, the older ones start to get less popular.</p>

<h3>What is the secret of being a great programmer?</h3>

<p>-Rojan S.</p>

<p>I’m not sure there is a secret, and it really depends on how you define “great programmer”. But I really believe that there’s no secret, <strong>it’s just about loving what you do every day, spending lots of time with it, and reading about code, writing about code, reading code, and writing code.</strong> I don’t think I’m a great programmer by all means - there’s always so much to learn, which is also the fun part about programming.</p>

<h3>What does an IT company look for before hiring a fresh candidate?</h3>

<p>-Rojan S.</p>

<p>It depends on what kind of positions the company is looking to hire in. For example, for senior engineers they might be looking for expertise in a specific technology.</p>

<p>For junior developer positions though, most companies will be looking for these things:</p>

<ul>
<li>Solid fundamentals of Programming</li>
<li>Problem solving skills (US companies will test you on algorithms and data structures)</li>
<li>Communication Skills (are you a good person)</li>
<li>Ability to learn and adapt</li>
<li>Project Experience</li>
</ul>


<h3>Big names vs startups? Which one is more interesting and why?</h3>

<p>-Aadesh S.</p>

<p>Personally, startups are more interesting (I guess this goes without saying). While I do think joining big corporate companies could be beneficial, it really depends on your goals. I am personally more interesting in trying new things, failing, then trying again and it finally goes well. I&rsquo;m also personally interested in putting myself in an environment where I am forced to learn things quickly, which startups tend to offer, since you have to do a lot of things yourself. Startups are creating something from scratch, much like coding.</p>

<p>Seeing some of my friends succeed in their startups, I am always inspired to make as big as an impact as them. They started out small and in a matter of months, they grew into a substantial size.</p>

<p>I also <strong>wake up everyday pumped to work on making TECHRISE better</strong>, and it&rsquo;s probably something that&rsquo;s hard to experience when you join a big company for many reasons.</p>

<p>On the other hand, big corporates offer structure, stability, and a brand. If you join one, you will have that brand with you for the rest of your life, which could be beneficial. You will also have some top talents since joining these companies can be quite competitive, thus you have higher quality talent (you do have top talent in Silicon Valley startups and many other startups as well, on the other hand).</p>

<p>Happy coding!</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Should I learn how to code?</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Should-I-Learn-How-to-Code.html" />
  <id>https://www.takehiromouri.com/Should-I-Learn-How-to-Code?</id>
  <published>2016-10-12T00:00:00Z</published>
  <updated>2016-10-12T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>I&rsquo;m pretty sure that there are other people like me who like building things and would rather do that instead of whatever work they are involved in that they aren&rsquo;t fit for. On the other hand, I have the impression that many people think that learning how to code is difficult and only for the mathematically capable (this was me in the past). But in my personal experience and looking at other examples as well, despite the common image of whiz kid programmers (think Mark Zuckerburg in Social Network), coding isn&rsquo;t that difficult to learn. And it certainly doesn&rsquo;t require high levels of computational skills, at least to start out.</p>

<p>There are so many free online resources that anyone can use to learn the basics of programming. There are also many wonderful paid resources to dive deeper. I really enjoy teaching people how to code because I sincerely believe that it&rsquo;s a skill/hobby that is not only a viable career option, but is also fun.</p>

<h4>Should I learn how to code?</h4>

<p>With that being said, I don&rsquo;t think everyone should be a programmer, nor should they be forced to be. Learning how to code is a good thing, but it doesn&rsquo;t mean that everyone should necessarily pursue a career in programming.</p>

<p>There tends to be a lot of articles suggesting that everyone should learn how to code. Education is moving towards the direction of making it mandatory for students to learn programming from a young age as well. This is a great thing in that it will certainly open a lot of doors for a lot of people. However, I&rsquo;m skeptical on whether most of the classes on programming that these students will enroll in will teach programming in a way that excites them. Sure, they can learn basic syntax and (be forced to) build some simple games, but will it be something that excites students? Or will it have an unfortunate effect of giving them a false impression that programming is boring and lead potential programmers to shy away from it?</p>

<p>I also think that even if one tries to force him/herself into becoming a programmer, I don&rsquo;t think it really works that way. You either like it and you spend lots of time doing it, and therefore become a good programmer, or you either don&rsquo;t like it and leave it.</p>

<p>That&rsquo;s why I think it&rsquo;s crucial to teach in a way that excites and motivates students to actually <em>build</em> things, instead of worrying about the complicated theoretical matters that may be involved with programming. I believe that the more the indiviual <em>likes</em> to program intrinsically, the better the individual will become at programming.</p>

<p>Learning how to program is a lifelong pursuit; like any thing that involve various elements, programming is easy to learn, but hard to master. However, although I certainly can&rsquo;t say that I have mastered programming in any way, I can say with confidence that the small rewards of pursuing mastery is extremely worthwhile.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">How learning how to code has changed my life</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/How-learning-how-to-code-has-changed-my-life.html" />
  <id>https://www.takehiromouri.com/How-learning-how-to-code-has-changed-my-life</id>
  <published>2016-10-12T00:00:00Z</published>
  <updated>2016-10-12T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>I&rsquo;ve always liked building things.</p>

<p>I grew up in the US, where a lot of nerds play a lot of video games and spend a lot of time with computers. One of my best friends growing up had a family full of computer people, and my other best friend was also really into playing video games.</p>

<p>Like many programmers, I started out playing a bunch of video games growing up, and in an attempt to beat other gamers, I would try out different hacks (wall-hacks, auto-aim, etc.). Sometimes the patches would work, sometimes they would not work. I spent a lot of time tinkering with the computer to get these things to try and work.</p>

<p>When I was around 10 years old, I built my first crappy third person shooter. I used some kind of game development software and created an extremely buggy, but playable third person shooter with bots that move right and left across the screen. Although I don&rsquo;t recall anyone but myself playing the game, I do remember spending quite a lot of time on it.</p>

<p>I also remember playing Runescape (an MMORPG) in the early days, and using macros to automate actions to increase my character&rsquo;s level. Unfortunately Runescape put in detection for these kind of macros, and that account soon got banned.</p>

<p>After I moved to Japan when I was 13, surprisingly many of the people I went to school with didn&rsquo;t play much PC video games, and they also didn&rsquo;t know much about using a computer. I naturally faded away from computers and gradually shifted towards playing basketball.</p>

<p>High school for me was odd - though I knew I was an introverted nerd by nature, I found myself playing basketball extremely intensely. We were winning prefectural championships, I was selected as a prefectural representative (mostly for the reason that I am considered to be super tall in Japan), and we played in national tournaments.</p>

<p>On the other hand, despite my involvement in athletic activities, I still found myself wanting to tinker with computers. So I started a blog about basketball. It turned out that the training methods in the US were different from the ones practiced in Japan, so I targeted motivated high school students playing basketball and wrote about US training methods.</p>

<p>As a high school kid, I wanted to make some money, but my time limitations being a student-athlete didn&rsquo;t allow me to take on any part-time jobs - so I searched for ways to make money doing what I liked; using computers. I first started by signing up to one of those websites where you make extremely small amounts of money by clicking on ads.</p>

<p>I quickly realized this was inefficient, boring, and a waste of time, so I started looking for something that would be more interesting and worthwhile. I soon found out that some people make money writing blogs through ads.</p>

<p>As naive as I was, that was how I got started writing my basketball blog. I googled around for SEO, learned some basic HTML and CSS, and read a bunch of articles about content marketing.</p>

<p>I learned how important it is to determine a specific target audience and write the article as if I were speaking to them. I also learned that to reach a larger audience, I needed to write a bunch of articles with high quality (quantity and quality). I also learned how to research for keywords, where to place Google ads (I&rsquo;m not sure if these things still apply), how to measure metrics using Google Analytics, etc. I probably only learned the surface of these things, but it was enough to make me around 100 USD per month from Google ad revenues.</p>

<p>This was my first experience of making money without actually working for a company. But what I realized was that I could simply work part-time for a company and make the same amount by working for a week or so - it wasn&rsquo;t really worth the time and effort. Plus, I didn&rsquo;t feel that excited to write about basketball, so I left my blog (although it continued making some revenue for some months).</p>

<p>Fast forward to the present and I&rsquo;m still tinkering with computers. I write a lot of code because it&rsquo;s a lot of fun for me, it&rsquo;s an intense hobby I have and I never get tired of it.</p>

<p>Once I learned how to code, my life has changed dramatically.</p>

<h4>I have a hobby that is a viable career</h4>

<p>I&rsquo;ve always had a bunch of hobbies that I would spend a lot of time with, like playing music, playing basketball, playing video games, etc. but they were never viable career options. When I was a naive middle school kid, I once tried persuading my parents that I wanted to go to Berklee School of Music and become a professional jazz drummer. My parents unsuprisingly discouraged me from that career option, saying that there&rsquo;s no money in it; which I completely agree with now that I reflect back on it.</p>

<p>Hobbies may inheritenly be a difficult career option for most cases, in the sense that hobbies are by definition, activities that are done in one&rsquo;s leisure time for one&rsquo;s pleasure, and not necessary for the fulfillment of others. Since money is just a currency that is exchanged for the value you create for society, unless you are solving someone else&rsquo;s problems or meeting some kind of need in some kind of way, it&rsquo;s really unlikely that you&rsquo;ll be making a career off of it. Unless you are in the top rank of musicians or gamers, it&rsquo;s really hard to create value for others, since there is a relatively limited market for these careers as of now.</p>

<p>On the other hand, programming has the same addictive nature that things like music or video games have, in that there is never an end to learning, and you can always get better. It&rsquo;s also easy to measure how competent you are compared to other people (just like how you can compare how much better you are at CounterStrike compared to your rival friend).</p>

<p>One of the things that is different is that there is a high demand for programmers compared to musicians or gamers. This makes sense since a lot of things are now automated or is starting to become automated with software, which means that programmers are needed to create that software.</p>

<p>A high demand for programmers also means that programmers have the ability to solve problems - and when you can solve problems, you tend to get some kind of value in return.</p>

<h4>I have more freedom</h4>

<p>There are many viable career options, but programming is somewhat of a rare one, since the only essential things you need to code and be productive is a laptop and good wifi. I&rsquo;ve worked remotely for a lot of projects while making a fair amount of money. A lot of companies are allowing developers to work remotely, and it seems that this trend might continue as there are more and more tools being developed to collaborate online with a team.</p>

<h4>I am back to creating things</h4>

<p>I&rsquo;ve always spent a lot of time making things because I like to do so. Coding has allowed me to pursue building things again.</p>

<h4>I can create a product for free</h4>

<p>You don&rsquo;t <em>have</em> to work for a company if you have something that you want to pursue. Right now I&rsquo;m working on a start up in Nepal that teaches people web development through a combination of an online curriculum and 1 on 1 personal mentor sessions.</p>

<p>Creating the platform is one of the things I enjoy most - not only do I get to code, I get to code the features that I want to build. I don&rsquo;t need to pay anyone to create the software (that would cost a lot of money), I just build it myself.</p>

<h4>I learn something new everyday</h4>

<p>I learn something new everyday, not in the sense of emotional growth, but in a sense of practical concrete knowledge that can be applied immediately. There are just limitless amounts of things to know as a programmer which motivates me and forces me in a way to continue learning. I am sure that when I look back at the code I am writing today in 2 or 3 years, or maybe even a couple of months, I will surely be disappointed in myself for that lack of consideration and immaturity of design.</p>

<h4>I can fail</h4>

<p>Bugs are encountered numerous times every day and software never works perfectly on the first try. Thus I make a lot of errors everyday. This is normal and I like the idea that I don&rsquo;t have to be perfect on the first try. I seems cliche, but I never liked the idea of how tests in most schools grade you on the performance of one test. It&rsquo;s efficient for sure, but it doesn&rsquo;t really capture and reflect the nature of most types of work. If one of the main purposes of education is to nurture more productive human beings, then why create tests that are opposite of what is practiced in most types of real work?</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Practical Object Oriented Design in Ruby Book Notes</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Practical-Object-Oriented-Design-in-Ruby-Book-Notes.html" />
  <id>https://www.takehiromouri.com/Practical-Object-Oriented-Design-in-Ruby-Book-Notes</id>
  <published>2016-09-10T00:00:00Z</published>
  <updated>2016-09-10T00:00:00Z</updated>
  <content type="html"><![CDATA[ <ul>
<li><p>The programming techniques that make code a joy to write overlap with those that most efficiently produce software</p></li>
<li><p>The techniques of object-oriented design solve both the moral and the technical dilemmas of programming; following them produces cost- effective software using code that is also a pleasure to work on.</p></li>
<li><p>Design does not matter unless there will be change to the application - but there is always change to the application</p></li>
<li><p>Object-oriented design is about managing dependencies. It is a set of coding techniques that arrange dependencies such that objects can tolerate change.</p></li>
<li><p>Dependent objects would wreak havoc because changing one object forces change upon another, leading another object to change etc.</p></li>
<li><p>You must not only write code for the feature you plan to deliver today, you must also create code that is amenable to being changed later.</p></li>
<li><p>Practical design does not anticipate what will happen to your application, it merely accepts that something will and that, in the present, you cannot know what. It doesn’t guess the future; it preserves your options for accommodating the future. It doesn’t choose; it leaves you room to move.</p></li>
<li><p>The purpose of design is to allow you to do design later and its primary goal is to reduce the cost of change.</p></li>
</ul>


<!-- 
* **SOLID**
  * Single Responsibility
  * Open-closed
  * Liskov Subtitution
  * Interface Segregation
  * Dependency Inversion -->


<ul>
<li><p>Studies were done to measure code quality, and indeed these design principles lead to high quality code</p></li>
<li><p>The Agile experience is that this collaboration produces software that differs from what was initially imagined; the resulting software could not have been anticipated by any other means.</p></li>
<li><p>BUFD stands for Big Up Front Design</p></li>
<li><p>Because Agile processes guarantee change, the ability to make changes to the code is necessary. Otherwise, everytime you would need to rewrite a bunch of code.</p></li>
<li><p>SLOC (source lines of code) to measure programmer contribution says nothing about overall equality</p></li>
<li><p>Object-oriented programming is object-oriented relative to non object-oriented, or procedural, programming.</p></li>
<li><p>Class-based OO languages like Ruby allow you to define a class that provides a blueprint for the construction of similar objects.</p></li>
<li><p>The trick to getting the most bang for your design buck is to acquire an understanding of the theories of design and to apply these theories appropriately, at the right time, and in the right amounts. Design relies on your ability to translate theory into practice.</p></li>
</ul>


<h2>Designing Classes with a Single Responsibility</h2>

<ul>
<li><p>The classes you create define a virtual world, and will affect how you think about your application forever.</p></li>
<li><p>Code should be <strong>TRUE</strong></p>

<ul>
<li>Transparent

<ul>
<li>The consequences of change should be obvious in the code that is changing and in distant code that relies upon it</li>
</ul>
</li>
<li>Reasonable

<ul>
<li>The cost of any change should be proportional to the benefits the change achieves</li>
</ul>
</li>
<li>Usable

<ul>
<li>Existing code should be usable in new and unexpected contexts</li>
</ul>
</li>
<li>Exemplary

<ul>
<li>The code itself should encourage those who change it to perpetuate
these qualities</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>A class should do the smallest possible useful thing; that is, it should have a single responsibility.</strong></p></li>
<li><p>A class that has more than one responsibility is difficult to reuse. The various responsibilities are likely thoroughly entangled within the class. If you want to reuse some (but not all) of its behavior, it is impossible to get at only the parts you need. You are faced with two options and neither is particularly appealing.</p></li>
<li><p>How can you determine if the Gear class contains behavior that belongs somewhere else?</p>

<ul>
<li><p><strong>One way is to pretend that it’s sentient (act as if it has feelings) and to interrogate it.</strong></p>

<ul>
<li>For example, “Please Mr. Gear, what is your ratio?” seems perfectly reasonable, while “Please Mr. Gear, what are your gear_inches?” is on shaky ground, and “Please Mr. Gear, what is your tire (size)?” is just downright ridiculous.</li>
</ul>
</li>
<li><p><strong>Another way is to attempt to describe it in one sentence</strong></p>

<ul>
<li>If the explanation requires the use of words such as <code>and</code> or <code>or</code>, then it most likely has more than one responsibility.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>When everything in a class is related to its central purpose, the class is said to be highly cohesive or to have a single responsibility.</strong></p></li>
<li><p>When faced with an imperfect and muddled class like Gear, ask yourself: “What is the future cost of doing nothing today?”</p></li>
<li><p>This “improve it now” versus “improve it later” tension always exists. Applications are never perfectly designed. Every choice has a price. A good designer understands this tension and minimizes costs by making informed tradeoffs between the needs of the present and the possibilities of the future.</p></li>
<li><p>Methods should also only have one single responsibility</p></li>
<li><p>If code inside a method needs a comment, extract that into a seperate method - the method name will serve the same purpose as the old comment.</p></li>
<li><p>Small methods encourage reuse</p></li>
<li><p>If you have a muddled class with too many responsibilities, seperate those responsibilities into different classes.</p></li>
<li><p>An object has a dependency when it knows</p></li>
<li><p>A class should know just enough to do its job and not one thing more</p></li>
<li><p><strong>Dependency Injection</strong> - moving an explicit dependency to an implicit one.</p></li>
<li><p>When a message requires arguments, not only can you not avoid having knowledge of those arguments, you also require that those arguments be passed in a specific fixed order.</p>

<ul>
<li>To avoid this, initialize the arguments using a hash</li>
</ul>
</li>
<li><p>Use the fetch method to set defaults instead of using ||</p></li>
<li><p>Depend on things that change less often than you do</p></li>
<li><p>When a class reveals al, it causes difficult to reuse objects</p></li>
<li><p>Comparison of classes vs kitchens - the class exists to fulfill a single responsibility but implements many methods</p></li>
<li><p>The context that an object expects has a direct effect on how difficult it is to reuse.</p></li>
<li><p>Distinction between what <strong>what</strong> and <strong>how</strong></p></li>
<li><p>Blind trust is a keystone of object-oriented design. It allows objects to collaborate without binding themselves to context and is necessary in any appliation that expects to gow and change</p></li>
<li><p>Duck types are public interfaces that are not tied to any specific class</p></li>
<li><p>Inheritance at its core is a mechanism for automatic message delegation</p></li>
</ul>

 ]]></content>
</entry>


  <entry>
  <title type="text">What does it take to become a web developer?</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/What-does-it-take-to-become-a-web-developer.html" />
  <id>https://www.takehiromouri.com/What-does-it-take-to-become-a-web-developer</id>
  <published>2016-09-05T00:00:00Z</published>
  <updated>2016-09-05T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h3>If you&rsquo;re just starting to dive into the field of web development, you&rsquo;re probably nervous about whether or not you are going to be able to actually become a programmer or not.</h3>

<p>I know, because I also felt the same way when I first started. I had close to no experience in coding, I didn&rsquo;t know if I was smart enough, and I didn&rsquo;t know if learning web development would actually be worth my time.</p>

<p>There are certain traits that I have found many software developers to share. While the traits may seem innately intrinsic, they are rather attitudes that can be developed.</p>

<h1>1. Motivation</h1>

<p>The most important trait to have when learning web development is motivation. Without motivation, no matter how smart you may be, you will never be able to learn web development.</p>

<p>Learning how to code initially is extremely difficult. At first, it seems like an impossible task. Most people who have never reached the level required to start making applications imagine coding as being incredibly difficult and a feat for the intelligent. I thought the same as well, thinking that coding is something for smart people.</p>

<p>But learning how to code is more of a mental game. When you first start out, you&rsquo;ll run into countless bugs, and you&rsquo;ll have no idea how to solve them at first. If you don&rsquo;t have the motivation, instead of trying to solve those problems, you&rsquo;ll most likely quit.</p>

<p>So before even considering learning to code, it&rsquo;s important to ask yourself if you have the proper motivation to start learning in the first place. If you feel an inner motivation coming within you that is urging you to learn, then chances are, you will be learning extremely quickly.</p>

<h1>2. Grit</h1>

<p>Debugging errors in the inital phase is both extremely time consuming and frustrating. You&rsquo;ll Google the error message, you&rsquo;ll try out different solutions, and most of the times you still won&rsquo;t be able to fix the bug.</p>

<p>As a software developer, it&rsquo;s common to be stuck on a bug for hours and hours. If you don&rsquo;t have the grit to work on the problem until it is fixed, you won&rsquo;t progress as a developer.</p>

<h1>3. Ability to Figure Things Out</h1>

<p>As a software developer, your job is solve problems. A common trait amongst developers is the ability to figure things out.</p>

<p>Figuring things out is essentially just breaking down big problems into small pieces, then solving them step by step. People that are good at this also tend to be extremely fast at breaking things down, trying different solutions, and figuring out what works and what doesn&rsquo;t.</p>

<h1>4. Ability to Self-Learn</h1>

<p>Software engeering is a pursuit in which there is no limit to the amount of knowledge and skills there are to learn. Most software engineers are passionate about what they do, and find the job interesting and fulfilling, thus spend a lot of time learning things on their own.</p>

<p>However, most of the times, there won&rsquo;t be a teacher teaching you everything you need to know - most learning is done by reading books, reading blogs, and actually implementing new knowledge.</p>

<p>Self-learning is a crucial way to progress forward as a developer.</p>

<p>In the end, all of these things are really come down to your attitude towards learning in my opinion. They aren&rsquo;t traits that are impossible to acquire - they&rsquo;re simply traits that can be acquired through a shift in attitudes.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Strings vs Symbols in Ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Strings-vs-Symbols-in-Ruby.html" />
  <id>https://www.takehiromouri.com/Strings-vs-Symbols-in-Ruby</id>
  <published>2016-08-15T00:00:00Z</published>
  <updated>2016-08-15T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  Symbols can be really confusing when you first use Ruby - what are the differences between Strings and Symbols?
</p>




<h3>Symbols are Faster</h3>




<p>
  Why are symbols faster?
</p>




<p>
  Consider the following:
</p>




<pre><code class="ruby">
string_1 = "Hello"
string_2 = "Hello"
</code></pre>




<p>
  Even if it has the same value, we are creating a new string. In other words, in the above example, we have manufactured two strings with the value of <code>"Hello"</code>.
</p>




<pre><code class="ruby">
string_1 = "Hello"
string_2 = "Hello"

string_1.object_id
# => 70209310447280
string_2.object_id
# => 70209310428440
</code></pre>




<p>
  However, with symbols this isn't the case.
</p>




<pre><code class="ruby">
string_1 = :hello
string_2 = :hello

string_1.object_id
# => 1149468
string_2.object_id
# => 1149468
</code></pre>




<p>
  In this case, both <code>:hello</code>s are exactly the same, they are not created twice.
</p>




<p>
  Since there can only be one instance of any symbol, comparison is much faster with symbols compared to strings. With strings, there can be multiple instances of strings with the same value, making the comparison relatively slower.
</p>




<p>
  Moreover, comparison of symbols are a O(1) comparison, so they are super efficient.
</p>




<h3>When to use symbols</h3>




<p> 
  Symbols are <strong>immutable</strong>. This means that once you create a symbol, you can't change it.
</p>




<p>
  With strings, you have handy methods like <code>upcase!</code> or <code>reverse!</code>, but symbols do not have that capability.
</p>




<p>
  <strong>This is why symbols are great for using when you are representing something that shouldn't change.</strong>
</p>



 ]]></content>
</entry>


  <entry>
  <title type="text">Tips for understanding the each loop in ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Tips-for-understanding-the-each-loop-in-ruby.html" />
  <id>https://www.takehiromouri.com/Tips-for-understanding-the-each-loop-in-ruby</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  I've had some students ask me about the <code>.each</code> loop in ruby :D Hopefully I can clarify some things.
</p>




<h3>Different Ways to Write .each Loop</h3>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span></p>

<p><span class="c1"># one way to loop</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">item</span> <span class="p">}</span></p>

<p><span class="c1"># another way to loop</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">item</span>
<span class="k">end</span></code></pre></figure></p>

<p>
  Above, we see two ways to write the <code>each</code> loop. Which one is better?
</p>




<p>
  The answer is, it depends. If the code is really short, then it makes sense to write it as a one liner. But if it's longer, it's better to write it as a <code>do</code> <code>end</code> block.
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span></p>

<p><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">number</span> <span class="p">}</span>
<span class="c1"># this is better as one liner</span></p>

<p><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
  <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;Another thing&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;Do another thing&quot;</span>
<span class="k">end</span>
<span class="c1"># this is better with each do, since doing this in </span>
<span class="c1"># one line would be very messy :)</span></code></pre></figure></p>

<p>
  In ruby, there are often multiple ways of writing code. Ruby developers tend to like shorter and more concise code :) For example, the <code>if</code> statement can even be written as a one-liner:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">some_condition</span>
  <span class="nb">puts</span> <span class="s2">&quot;TECHRISE students are awesome&quot;</span>
<span class="k">end</span></p>

<p><span class="c1"># the above is OK, but we can rewrite it like this</span></p>

<p><span class="nb">puts</span> <span class="s2">&quot;TECHRISE students are awesome&quot;</span> <span class="k">if</span> <span class="n">some_condition</span></p>

<p><span class="c1"># this is considered to be cleaner and many ruby programmers</span>
<span class="c1"># prefer this style</span></code></pre></figure></p>

<p>
  Pretty cool right? :)
</p>




<h3>What is this || thing?</h3>




<p>
  When you are using <code>each</code> loops, you'll encounter these <code>||</code> things. You're probably wondering what these are :)
</p>




<p>
  Let's take a look at the following:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span></p>

<p><span class="c1"># this will print out </span>
<span class="c1"># 1</span>
<span class="c1"># 2</span>
<span class="c1"># 3</span>
<span class="c1"># 4</span>
<span class="c1"># 5</span></code></pre></figure></p>

<p>
  Notice how we have <code>|number|</code>. These placeholders only work within the loop and not outside:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span></p>

<p><span class="nb">puts</span> <span class="n">number</span></p>

<p><span class="c1"># returns an error =&gt; &quot;NameError: undefined local variable or method `number&#39; for main:Object&quot;</span></code></pre></figure></p>

<p>
  You can name these placeholders whatever you want:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">momo</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">momo</span>
<span class="k">end</span></p>

<p><span class="c1"># still prints out all of the numbers</span></p>

<p><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dog</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">dog</span>
<span class="k">end</span></p>

<p><span class="c1"># still prints out all of the numbers</span></code></pre></figure></p>

<p>
  However, we should name the placeholder something that makes sense.
</p>




<ul>
  <li>Be careful of pluralization</li>
  <ul>
    <li>If it's singular, name it a singular placeholder (<code>number</code>)</li>
    <li>If it's pluralization, name it a plural placeholder (<code>numbers</code>)</li>
  </ul>
  <li>The name should represent what the item is</li>
</ul>


<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">A better example of the sort_by method for hashes in Ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/A-better-example-of-the-sort_by-method-for-hashes-in-Ruby.html" />
  <id>https://www.takehiromouri.com/A-better-example-of-the-sort_by-method-for-hashes-in-Ruby</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  Codecademy is great for learning the fundamentals, but at the same time sometimes they use really confusing examples.
</p>




<p>
  For example, in one of the lessons, you have to write code that looks like this:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&quot;Enter Text:&quot;</span>
<span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span></p>

<p><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span></p>

<p><span class="n">frequencies</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></p>

<p><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="n">frequencies</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">end</span></p>

<p><span class="n">frequencies</span> <span class="o">=</span>  <span class="n">frequencies</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">}</span>
<span class="n">frequencies</span><span class="o">.</span><span class="n">reverse!</span></code></pre></figure></p>

<p>
  What is this <code>frequencies.sort_by { |k, v| v}</code> code?!
</p>




<p>
  It's actually really easy to understand if you look at another example of how the <code>sort_by</code> method is used in hashes.
</p>




<h3>First, what are hashes?</h3>




<p>
  Hashes consist of keys and values. For example, we could have a <code>people</code> hash that contains information about a person's name and their age.
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:fred</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
  <span class="ss">:joan</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">,</span>
  <span class="ss">:pete</span> <span class="o">=&gt;</span> <span class="mi">54</span>
<span class="p">}</span></code></pre></figure></p>

<p>
  Inside the <code>people</code> hash, we have 3 sets of keys and values. <code>:fred</code>, <code>:joan</code>, <code>:pete</code> are all keys, and <code>23</code>, <code>18</code>, and <code>54</code> are all values.
</p>




<p>
  Hashes are really nice because you can get the value of a key really quickly. For example, if we wanted to find out the age of <code>:fred</code>, all we have to do is this:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span><span class="o">[</span><span class="ss">:fred</span><span class="o">]</span>
<span class="c1"># =&gt; 23</span></code></pre></figure></p>

<p>
  It's hard to do the same thing with arrays, so hashes are very useful.
</p>


<p></p>

<p>
  However, what if we want to sort the hash? What if we want to sort the hash by the name or the age?
</p>




<p>
  This is where the <code>.sort_by</code> method is handy :) Take a look at the code below:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:fred</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
  <span class="ss">:joan</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">,</span>
  <span class="ss">:pete</span> <span class="o">=&gt;</span> <span class="mi">54</span>
<span class="p">}</span></p>

<p><span class="n">people</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="o">|</span> <span class="n">age</span> <span class="p">}</span>
  <span class="c1"># =&gt; [[:joan, 18], [:fred, 23], [:pete, 54]]</span></p>

<p><span class="n">people</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="o">|</span> <span class="nb">name</span> <span class="p">}</span>
  <span class="c1"># =&gt; [[:fred, 23], [:joan, 18], [:pete, 54]]</span></code></pre></figure></p>

<p>
  <code>people.sort_by { |name, age| age }</code> -> here we are sorting the <code>people</code> hash by each person's <code>age</code>.
</p>




<p>
  <code>people.sort_by { |name, age| name }</code> -> here we are sorting the <code>people</code> hash by each person's <code>name</code>.
</p>




<p> 
  By looking at this example, hopefully all of the sudden the mystery of <code>frequencies.sort_by { |k, v| v}</code> is solved :)
</p>


<p></p>

<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>



</feed>
