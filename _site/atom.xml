<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Takehiro Mouri - Ruby on Rails Developer</title>
    <link type="application/atom+xml" rel="self" href="https://www.takehiromouri.com/atom.xml"/>
  
  <link href="https://www.takehiromouri.com/"/>
  <id>https://www.takehiromouri.com/</id>
  <updated>2016-09-09T10:48:11Z</updated>
  <author>
    <name>Takehiro Mouri</name>
    <email>takehiromouri@gmail.com</email>
  </author>
  <rights type="text">Copyright Â© 2016 Takehiro Mouri. All rights reserved.</rights>
  
  <entry>
  <title type="text">What does it take to become a web developer?</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/What-does-it-take-to-become-a-web-developer.html" />
  <id>https://www.takehiromouri.com/What-does-it-take-to-become-a-web-developer</id>
  <published>2016-09-05T00:00:00Z</published>
  <updated>2016-09-05T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h3>If you&rsquo;re just starting to dive into the field of web development, you&rsquo;re probably nervous about whether or not you are going to be able to actually become a programmer or not.</h3>

<p>I know, because I also felt the same way when I first started. I had close to no experience in coding, I didn&rsquo;t know if I was smart enough, and I didn&rsquo;t know if learning web development would actually be worth my time.</p>

<p>There are certain traits that I have found many software developers to share. While the traits may seem innately intrinsic, they are rather attitudes that can be developed.</p>

<h1>1. Motivation</h1>

<p>The most important trait to have when learning web development is motivation. Without motivation, no matter how smart you may be, you will never be able to learn web development.</p>

<p>Learning how to code initially is extremely difficult. At first, it seems like an impossible task. Most people who have never reached the level required to start making applications imagine coding as being incredibly difficult and a feat for the intelligent. I thought the same as well, thinking that coding is something for smart people.</p>

<p>But learning how to code is more of a mental game. When you first start out, you&rsquo;ll run into countless bugs, and you&rsquo;ll have no idea how to solve them at first. If you don&rsquo;t have the motivation, instead of trying to solve those problems, you&rsquo;ll most likely quit.</p>

<p>So before even considering learning to code, it&rsquo;s important to ask yourself if you have the proper motivation to start learning in the first place. If you feel an inner motivation coming within you that is urging you to learn, then chances are, you will be learning extremely quickly.</p>

<h1>2. Grit</h1>

<p>Debugging errors in the inital phase is both extremely time consuming and frustrating. You&rsquo;ll Google the error message, you&rsquo;ll try out different solutions, and most of the times you still won&rsquo;t be able to fix the bug.</p>

<p>As a software developer, it&rsquo;s common to be stuck on a bug for hours and hours. If you don&rsquo;t have the grit to work on the problem until it is fixed, you won&rsquo;t progress as a developer.</p>

<h1>3. Ability to Figure Things Out</h1>

<p>As a software developer, your job is solve problems. A common trait amongst developers is the ability to figure things out.</p>

<p>Figuring things out is essentially just breaking down big problems into small pieces, then solving them step by step. People that are good at this also tend to be extremely fast at breaking things down, trying different solutions, and figuring out what works and what doesn&rsquo;t.</p>

<h1>4. Ability to Self-Learn</h1>

<p>Software engeering is a pursuit in which there is no limit to the amount of knowledge and skills there are to learn. Most software engineers are passionate about what they do, and find the job interesting and fulfilling, thus spend a lot of time learning things on their own.</p>

<p>However, most of the times, there won&rsquo;t be a teacher teaching you everything you need to know - most learning is done by reading books, reading blogs, and actually implementing new knowledge.</p>

<p>Self-learning is a crucial way to progress forward as a developer.</p>

<p>In the end, all of these things are really come down to your attitude towards learning in my opinion. They aren&rsquo;t traits that are impossible to acquire - they&rsquo;re simply traits that can be acquired through a shift in attitudes.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Strings vs Symbols in Ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Strings-vs-Symbols-in-Ruby.html" />
  <id>https://www.takehiromouri.com/Strings-vs-Symbols-in-Ruby</id>
  <published>2016-08-15T00:00:00Z</published>
  <updated>2016-08-15T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  Symbols can be really confusing when you first use Ruby - what are the differences between Strings and Symbols?
</p>




<h3>Symbols are Faster</h3>




<p>
  Why are symbols faster?
</p>




<p>
  Consider the following:
</p>




<pre><code class="ruby">
string_1 = "Hello"
string_2 = "Hello"
</code></pre>




<p>
  Even if it has the same value, we are creating a new string. In other words, in the above example, we have manufactured two strings with the value of <code>"Hello"</code>.
</p>




<pre><code class="ruby">
string_1 = "Hello"
string_2 = "Hello"

string_1.object_id
# => 70209310447280
string_2.object_id
# => 70209310428440
</code></pre>




<p>
  However, with symbols this isn't the case.
</p>




<pre><code class="ruby">
string_1 = :hello
string_2 = :hello

string_1.object_id
# => 1149468
string_2.object_id
# => 1149468
</code></pre>




<p>
  In this case, both <code>:hello</code>s are exactly the same, they are not created twice.
</p>




<p>
  Since there can only be one instance of any symbol, comparison is much faster with symbols compared to strings. With strings, there can be multiple instances of strings with the same value, making the comparison relatively slower.
</p>




<p>
  Moreover, comparison of symbols are a O(1) comparison, so they are super efficient.
</p>




<h3>When to use symbols</h3>




<p> 
  Symbols are <strong>immutable</strong>. This means that once you create a symbol, you can't change it.
</p>




<p>
  With strings, you have handy methods like <code>upcase!</code> or <code>reverse!</code>, but symbols do not have that capability.
</p>




<p>
  <strong>This is why symbols are great for using when you are representing something that shouldn't change.</strong>
</p>



 ]]></content>
</entry>


  <entry>
  <title type="text">Tips for understanding the each loop in ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Tips-for-understanding-the-each-loop-in-ruby.html" />
  <id>https://www.takehiromouri.com/Tips-for-understanding-the-each-loop-in-ruby</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  I've had some students ask me about the <code>.each</code> loop in ruby :D Hopefully I can clarify some things.
</p>




<h3>Different Ways to Write .each Loop</h3>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span></p>

<p><span class="c1"># one way to loop</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">item</span> <span class="p">}</span></p>

<p><span class="c1"># another way to loop</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">item</span>
<span class="k">end</span></code></pre></figure></p>

<p>
  Above, we see two ways to write the <code>each</code> loop. Which one is better?
</p>




<p>
  The answer is, it depends. If the code is really short, then it makes sense to write it as a one liner. But if it's longer, it's better to write it as a <code>do</code> <code>end</code> block.
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span></p>

<p><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">number</span> <span class="p">}</span>
<span class="c1"># this is better as one liner</span></p>

<p><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
  <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;Another thing&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;Do another thing&quot;</span>
<span class="k">end</span>
<span class="c1"># this is better with each do, since doing this in </span>
<span class="c1"># one line would be very messy :)</span></code></pre></figure></p>

<p>
  In ruby, there are often multiple ways of writing code. Ruby developers tend to like shorter and more concise code :) For example, the <code>if</code> statement can even be written as a one-liner:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">some_condition</span>
  <span class="nb">puts</span> <span class="s2">&quot;TECHRISE students are awesome&quot;</span>
<span class="k">end</span></p>

<p><span class="c1"># the above is OK, but we can rewrite it like this</span></p>

<p><span class="nb">puts</span> <span class="s2">&quot;TECHRISE students are awesome&quot;</span> <span class="k">if</span> <span class="n">some_condition</span></p>

<p><span class="c1"># this is considered to be cleaner and many ruby programmers</span>
<span class="c1"># prefer this style</span></code></pre></figure></p>

<p>
  Pretty cool right? :)
</p>




<h3>What is this || thing?</h3>




<p>
  When you are using <code>each</code> loops, you'll encounter these <code>||</code> things. You're probably wondering what these are :)
</p>




<p>
  Let's take a look at the following:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span></p>

<p><span class="c1"># this will print out </span>
<span class="c1"># 1</span>
<span class="c1"># 2</span>
<span class="c1"># 3</span>
<span class="c1"># 4</span>
<span class="c1"># 5</span></code></pre></figure></p>

<p>
  Notice how we have <code>|number|</code>. These placeholders only work within the loop and not outside:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span></p>

<p><span class="nb">puts</span> <span class="n">number</span></p>

<p><span class="c1"># returns an error =&gt; &quot;NameError: undefined local variable or method `number&#39; for main:Object&quot;</span></code></pre></figure></p>

<p>
  You can name these placeholders whatever you want:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">momo</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">momo</span>
<span class="k">end</span></p>

<p><span class="c1"># still prints out all of the numbers</span></p>

<p><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dog</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">dog</span>
<span class="k">end</span></p>

<p><span class="c1"># still prints out all of the numbers</span></code></pre></figure></p>

<p>
  However, we should name the placeholder something that makes sense.
</p>




<ul>
  <li>Be careful of pluralization</li>
  <ul>
    <li>If it's singular, name it a singular placeholder (<code>number</code>)</li>
    <li>If it's pluralization, name it a plural placeholder (<code>numbers</code>)</li>
  </ul>
  <li>The name should represent what the item is</li>
</ul>


<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">A better example of the sort_by method for hashes in Ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/A-better-example-of-the-sort_by-method-for-hashes-in-Ruby.html" />
  <id>https://www.takehiromouri.com/A-better-example-of-the-sort_by-method-for-hashes-in-Ruby</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  Codecademy is great for learning the fundamentals, but at the same time sometimes they use really confusing examples.
</p>




<p>
  For example, in one of the lessons, you have to write code that looks like this:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&quot;Enter Text:&quot;</span>
<span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span></p>

<p><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span></p>

<p><span class="n">frequencies</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></p>

<p><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="n">frequencies</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">end</span></p>

<p><span class="n">frequencies</span> <span class="o">=</span>  <span class="n">frequencies</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">}</span>
<span class="n">frequencies</span><span class="o">.</span><span class="n">reverse!</span></code></pre></figure></p>

<p>
  What is this <code>frequencies.sort_by { |k, v| v}</code> code?!
</p>




<p>
  It's actually really easy to understand if you look at another example of how the <code>sort_by</code> method is used in hashes.
</p>




<h3>First, what are hashes?</h3>




<p>
  Hashes consist of keys and values. For example, we could have a <code>people</code> hash that contains information about a person's name and their age.
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:fred</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
  <span class="ss">:joan</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">,</span>
  <span class="ss">:pete</span> <span class="o">=&gt;</span> <span class="mi">54</span>
<span class="p">}</span></code></pre></figure></p>

<p>
  Inside the <code>people</code> hash, we have 3 sets of keys and values. <code>:fred</code>, <code>:joan</code>, <code>:pete</code> are all keys, and <code>23</code>, <code>18</code>, and <code>54</code> are all values.
</p>




<p>
  Hashes are really nice because you can get the value of a key really quickly. For example, if we wanted to find out the age of <code>:fred</code>, all we have to do is this:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span><span class="o">[</span><span class="ss">:fred</span><span class="o">]</span>
<span class="c1"># =&gt; 23</span></code></pre></figure></p>

<p>
  It's hard to do the same thing with arrays, so hashes are very useful.
</p>


<p></p>

<p>
  However, what if we want to sort the hash? What if we want to sort the hash by the name or the age?
</p>




<p>
  This is where the <code>.sort_by</code> method is handy :) Take a look at the code below:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:fred</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
  <span class="ss">:joan</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">,</span>
  <span class="ss">:pete</span> <span class="o">=&gt;</span> <span class="mi">54</span>
<span class="p">}</span></p>

<p><span class="n">people</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="o">|</span> <span class="n">age</span> <span class="p">}</span>
  <span class="c1"># =&gt; [[:joan, 18], [:fred, 23], [:pete, 54]]</span></p>

<p><span class="n">people</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="o">|</span> <span class="nb">name</span> <span class="p">}</span>
  <span class="c1"># =&gt; [[:fred, 23], [:joan, 18], [:pete, 54]]</span></code></pre></figure></p>

<p>
  <code>people.sort_by { |name, age| age }</code> -> here we are sorting the <code>people</code> hash by each person's <code>age</code>.
</p>




<p>
  <code>people.sort_by { |name, age| name }</code> -> here we are sorting the <code>people</code> hash by each person's <code>name</code>.
</p>




<p> 
  By looking at this example, hopefully all of the sudden the mystery of <code>frequencies.sort_by { |k, v| v}</code> is solved :)
</p>


<p></p>

<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">.split method</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/.split-method.html" />
  <id>https://www.takehiromouri.com/.split-method</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  I've had some students ask me about the <code>.split</code> method in ruby :D
</p>




<p>
  Here's a brief rundown of how it works. Hopefully the examples do a good job of explaining what it does :)
</p>


<p></p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">momos</span> <span class="o">=</span> <span class="s2">&quot;I love momos&quot;</span>
<span class="n">momos</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
<span class="c1"># =&gt; [&quot;I&quot;, &quot;love&quot;, &quot;momos&quot;]</span>
<span class="c1"># returns an array of strings seperated by &quot; &quot;</span></p>

<p><span class="n">string_2</span> <span class="o">=</span> <span class="s2">&quot;A, bc, def, ghi&quot;</span>
<span class="n">string_2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
<span class="c1"># =&gt; [&quot;A&quot;, &quot; bc&quot;, &quot; def&quot;, &quot; ghi&quot;]</span>
<span class="c1"># here, we are splitting the array with &quot;,&quot;</span>
<span class="c1"># then we are storing them in an array</span></p>

<p><span class="n">string_3</span> <span class="o">=</span> <span class="s2">&quot;abcdefgabcdefg&quot;</span>
<span class="n">string_3</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>
<span class="c1"># =&gt; [&quot;&quot;, &quot;bcdefg&quot;, &quot;bcdefg&quot;]</span>
<span class="c1"># here, we are splitting the array by &quot;a&quot;, so we get this result</span></code></pre></figure></p>

<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">How to Count Belonging Objects More Efficiently in Rails</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/How-to-Count-Belonging-Objects-More-Efficiently-in-Rails.html" />
  <id>https://www.takehiromouri.com/How-to-Count-Belonging-Objects-More-Efficiently-in-Rails</id>
  <published>2016-04-01T00:00:00Z</published>
  <updated>2016-04-01T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>A lot of times when writing rails apps, you face a situation where you have to count the number of child objects a parent object has.</p>

<p>For instance, let&rsquo;s say we have a <code>User</code> model and a <code>Comment</code> model where <code>User</code> <code>has_many :comments</code> and <code>Comment</code> <code>belongs_to :user</code>.</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:comments</span>
<span class="k">end</span></code></pre></figure></p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span></code></pre></figure></p>

<p>What do we do when we want to count the number of comments that a <code>User</code> has? A lot of times, it would look something like this:</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">count</span></code></pre></figure></p>

<p>This is all fine, if you&rsquo;re only using it once in a while.
But say we need to query the database often for the number of comments that a <code>User</code> has.</p>

<p>Let&rsquo;s see what the performance is like when using <code>user.comments.count</code>.
In an example app I created with the same models as above, I tested this out with a <code>user</code> with 225 <code>comments</code>:</p>

<p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">irb<span class="o">(</span>main<span class="o">)</span>:015:0&gt; User.first.comments.count
  User Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT  <span class="s2">&quot;users&quot;</span>.<em> FROM <span class="s2">&quot;users&quot;</span>  ORDER BY <span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;id&quot;</span> ASC LIMIT 1
   <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT COUNT<span class="o">(</span></em><span class="o">)</span> FROM <span class="s2">&quot;comments&quot;</span> WHERE <span class="s2">&quot;comments&quot;</span>.<span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;user_id&quot;</span>, 1<span class="o">]]</span>
<span class="o">=</span>&gt; 225</code></pre></figure></p>

<p>Notice how the <code>comments</code> are queried with a COUNT(*) query. If we were to query 100 users at once for <code>comments.count</code>, it would be a big load for the database.</p>

<p>Here&rsquo;s how we can avoid the COUNT(*) query and improve performance:</p>

<h2>Introducing <code>counter_cache</code></h2>


<p>Instead of querying <code>comments</code>, we can just store the number of comments a user has in the <code>User</code> table and get the number of comments without any SQL query.</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">AddCommentCounterToUser</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:comments_count</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure></p>

<p>In order for <code>counter_cache</code> to work, we need to create a database column that ends with <code>_count</code>. So here, we have created a <code>comments_count</code> column that will store the number of comments inside.</p>

<p>After we run the migration, we want to initially update the <code>comments_count</code> for each <code>User</code>.</p>

<p>We can do this by creating a rake file, or manually running code in the console:</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">User</span><span class="o">.</span><span class="n">reset_column_information</span>
<span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="no">User</span><span class="o">.</span><span class="n">update_counters</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">comments_count</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">length</span>
<span class="k">end</span></code></pre></figure></p>

<p><code>reset_column_information</code> resets all the cached information about columns, and will be reloaded before the code below runs.</p>

<p>Now after we run this code, we see that the correct number of comments are stored in the user object:</p>

<p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">irb<span class="o">(</span>main<span class="o">)</span>:005:0&gt; <span class="nv">user</span>
<span class="o">=</span>&gt; <span class="c">#&lt;User id: 1, name: &quot;Bob&quot;, created_at: &quot;2016-04-01 06:51:53&quot;, updated_at: &quot;2016-04-01 07:37:39&quot;, comments_count: 225&gt;</span></code></pre></figure></p>

<p>One more thing we need to do:</p>

<p>In the <code>Comment</code> model, we need to set <code>counter_cache: true</code>.</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">counter_cache</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span></code></pre></figure></p>

<p>This will increment and decrement the <code>comments_count</code> column automatically in <code>User</code> whenever a comment is created or deleted.</p>

<p>Let&rsquo;s test this out:</p>

<p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">irb<span class="o">(</span>main<span class="o">)</span>:006:0&gt; user.comments.create<span class="o">(</span>text: <span class="s2">&quot;hello&quot;</span><span class="o">)</span>
   <span class="o">(</span>1.7ms<span class="o">)</span>  begin transaction
  SQL <span class="o">(</span>1.9ms<span class="o">)</span>  INSERT INTO <span class="s2">&quot;comments&quot;</span> <span class="o">(</span><span class="s2">&quot;text&quot;</span>, <span class="s2">&quot;user_id&quot;</span>, <span class="s2">&quot;created_at&quot;</span>, <span class="s2">&quot;updated_at&quot;</span><span class="o">)</span> VALUES <span class="o">(</span>?, ?, ?, ?<span class="o">)</span>  <span class="o">[[</span><span class="s2">&quot;text&quot;</span>, <span class="s2">&quot;hello&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;user_id&quot;</span>, 1<span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;created_at&quot;</span>, <span class="s2">&quot;2016-04-02 18:27:36.897717&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;updated_at&quot;</span>, <span class="s2">&quot;2016-04-02 18:27:36.897717&quot;</span><span class="o">]]</span>
  SQL <span class="o">(</span>0.6ms<span class="o">)</span>  UPDATE <span class="s2">&quot;users&quot;</span> SET <span class="s2">&quot;comments_count&quot;</span> <span class="o">=</span> COALESCE<span class="o">(</span><span class="s2">&quot;comments_count&quot;</span>, 0<span class="o">)</span> + <span class="m">1</span> WHERE <span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;id&quot;</span>, 1<span class="o">]]</span>
   <span class="o">(</span>5.9ms<span class="o">)</span>  commit <span class="nv">transaction</span>
<span class="o">=</span>&gt; <span class="c">#&lt;Comment id: 225, user_id: 1, text: &quot;hello&quot;, created_at: &quot;2016-04-02 18:27:36&quot;, updated_at: &quot;2016-04-02 18:27:36&quot;&gt;</span>
irb<span class="o">(</span>main<span class="o">)</span>:007:0&gt; user.comments_count
<span class="o">=</span>&gt; 226</code></pre></figure></p>

<p>Awesome! As you can see, it properly incremented the <code>comments_count</code> from <code>225</code> to <code>226</code>.</p>

<p>Using <code>counter_cache</code> can increase performance when you are trying to display, for instance, many users and their comment counts. Instead of making a bunch of COUNT(*) queries, by using <code>counter_cache</code>, you can access the same information by just accessing a column in the <code>User</code> table.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">My Approach to Achieving Deep Focus</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Entering-Zen-Mode.html" />
  <id>https://www.takehiromouri.com/Entering-Zen-Mode</id>
  <published>2016-03-30T00:00:00Z</published>
  <updated>2016-03-30T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>If you ever want to get good at something, Iâm a firm believer of going into what I like to call <strong>âZen Modeâ</strong>. Some people call it <i>âthe state of flowâ</i>, some people call it <i>âdeep focusâ</i>, other people call it other things.</p>

<p>I get the most things done when Iâm in my Zen Mode.</p>

<p><strong>If Iâm not in my Zen Mode, Iâm distracted, Iâm unfocused, and Iâm wasting my time.</strong></p>

<h1>First I ask myself: Do I like what Iâm doing?</h1>

<p>First things first, I find that <strong>if I donât like what Iâm learning or doing, Iâm never able to enter Zen Mode.</strong></p>

<p>So if Iâm trying to enter Zen Mode in something I just donât enjoy or care about, then <strong>Iâm a strong believer in picking up something else instead.</strong></p>

<h1>Locking Myself Up = Deep Focus</h1>

<p>One of my friends who I consider to be a genius mathematician once told me this:</p>

<p><i>&ldquo;The only way you can improve on things is to lock yourself up in a room and practice.&rdquo;</i></p>

<p>This might be a super asian way of thinking of thingsâ(I&rsquo;m asian) ââ<strong>BUT</strong> it has a lot of truths to it, especially if itâs a skill set in which individual work is important.</p>

<p>How does one become a great artist? A great engineer?</p>

<p><strong>Most likely through hours of practice alone.</strong></p>

<p>Whenever Iâm trying to improve a skill, often times the best bet is to really immerse myself in the activity.</p>

<p>And <strong>to immerse myself in the activity, I canât have other people around me, or have other distractions.</strong></p>

<h2>But itâs difficult when you have friends, social pressures, and obligations.</h2>

<p><strong>Itâs also hard to say no.</strong></p>

<p>It was personally difficult for me to turn down invitations from my friends to go out and get drunkâââ<strong>but after my mathematician friend gave me his perspective, it made me feel fine about not always going out or being social.</strong></p>

<p>Social pressures can work for people or it can work against people. Since my friend encouraged me to feel okay about being a nerd, I&rsquo;ve encouraged my friends to do so as well.</p>

<p>This kind of creates an eco system where our group of friends can freely be nerds and be okay about it, and it works great.</p>

<p>If you&rsquo;re one of these people or want to make yourself feel better about being a nerd, please do message me and I will be super happy of making another hardworking nerdy friend.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">How to Learn How to Code while Getting Paid</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/How-To-Learn-How-to-Code-while-Getting-Paid.html" />
  <id>https://www.takehiromouri.com/How-To-Learn-How-to-Code-while-Getting-Paid</id>
  <published>2016-03-20T00:00:00Z</published>
  <updated>2016-03-20T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h3>
  This was my stupid 3-step plan to becoming a superstar hacker 2 years ago when I first attempted to learn how to code:
</h3>




<ol>
  <li>Go through Codecademy courses</li>
  <li>Enroll in CS50</li>
  <li>Become a superstar coder</li>
</ol>




<p>
  I thought that this was all I needed to do in order for me to start creating the next Facebook.
</p>




<h1>WRONG.</h1>




<h3>
  This is what happened instead:
</h3>




<p>
  I blew through the Codecademy HTML/CSS and JavaScript/jQuery course and then quickly enrolled in CS50 (online introductory computer science course held by Harvard). Phew! After I finish CS50, I'll be amazing! - or so I thought.
</p>




<h3>Not Quite.</h3>




<p>
  For the first 3 lectures, I sat in my "virtual class environment" (my sofa + laptop) super excited about programming. And of course, as any one supposedly embarking on a new adventure would, I thought CS50 was going to change my life. The lecturer was super easy to understand, energetic, and to the point. They did a great job presenting the information and I thought I was learning a whole lot.
</p>




<p>
  But then after a couple of lectures, I was confused as <strong>#%!&</strong>. Pointers? Memory allocation? <strong>Programming suddenly seemed like a super complex thing to learn.</strong> The course went on about bubble sorts and merge sorts and all sorts of sorts. I was becoming more and more confused and I simply couldn't manage my motivation.
</p>




<h3>After 3 weeks, I had quit.</h3>




<p>
  My mind was spiraling with negative thoughts: <em>"I'm not smart enough for this. Coding is for smart people. Coding is for mathy people. I'm not fit for this."</em>
</p>




<p>
  Plus, even though I breezed through the Codecademy stuff, I had forgot most of the stuff that I had learned in a matter of a few weeks! <strong>This was a terrible, terrible investment of my time.</strong>
</p>




<hr>




<p>
  Then in August 2015, I had the urge to give coding a try once again and joined a coding bootcamp called <a href="http://www.thefirehoseproject.com" target="_blank">The Firehose Project</a>. It was the best decision I made that year. (I talk more about coding bootcamps in <a href="http://takehiromouri.com/Coding-Bootcamps-vs-Computer-Science.html" target="_blank">this post</a> and how it has changed my life in many ways in non-woowoo pseudo-science ways.)
</p>




<p>
  In short, the coding bootcamp was a super positive experience for me and lead me to land multiple jobs as a developer as well as dive deeper into programming and eventually computer science as well. The bootcamp's teaching methodologies enabled me to learn much quicker and much faster than going through Codecademy or CS50 or anything of that sort. 
</p>




<h3>
  I hear a lot of close friends wanting to learn how to learn how to code, so this is a post that will talk about what <strong><em>I think</em></strong> is the best and fastest way to start coding based on my <strong><em>personal experiences</em></strong>.
</h3>




<hr>




<h1>Step 1. Learn and Understand</h1>




<p>
  The first step is to <strong>learn and understand</strong>. Here's exactly how I go about it:
</p>




<ul>
  <li>Google "Best resources for learning <em>&lt;programming language/framework here&gt;</em>"</li>
  <li>If there is a Quora post, click on that (Quora tends to have higher quality answers)</li>
  <li>Surf around other search results and find the common resources that show up in multiple places</li>
  <li>Look through the common resources and see which ones excites me most</li>
  <li>Start learning with the resources</li>
</ul>




<p>
  The material you use for learning programming is super important. If you are spending 10 hours learning something, then the 10 hours better be spent learning material that is <strong>relevant and easy to understand</strong>. <strong>You don't want to spend hours and hours on resources that are hard to understand or not engaging - they are simply just a waste of time.</strong>
</p>




<p>
  You'll see sites like Codecademy come up in your Google search, and you might be wondering if it's actually a good resource since I mentioned how it <em>didn't</em> work for me earlier in this post.
</p>




<p>
  Despite my lack of success with Codecademy initially, I actually recommend it (and also websites similar to it) - it's great for learning the gist of the language. <strong>However, the important thing is to transition to Step 2 immediately after finishing this step. Otherwise, you'll just forget most of the stuff you learned (like I did initially).</strong>
</p>




<h1>Step 2. Build and Break</h1>




<p>
  You now understand the gist of the programming language or framework and how it works.
</p>




<p>
  The next step is to <strong>build and break</strong>. This means going out and actually <strong>building</strong> something with the stuff you just learned and then fixing bugs as they come along. Bugs are inevitable, but you can learn a lot from bugs and broken code. <strong>You want to start building with the assumption that you're going to be writing bad code - and then improving it.</strong>
</p>




<p>
  There are 2 steps to this, in my opinion. First, it's smart to go through some tutorials, or else you'll be completely lost. Once you've done some tutorials and feel comfortable, you should go and build your own project:
</p>




<!-- <h3>If it's your first time with the language or framework</h3>
<p>
  - go through some tutorials first
</p>

<h3>If you've already built something in Step 1</h3>
<p>
  - if you feel comfortable, then start building your own project.
</p>
<p>
  - if you don't feel comfortable yet, then start another tutorial until you really understand how most of the stuff works.
</p> -->




<h2>Step 2-a. Tutorials</h2>




<p>
  Again, finding good tutorials are key here. Many times, the reputable tutorials show up in the results in Step 1, when searching for resources on whatever you're trying to learn.
</p>




<p>
  If you've finished a tutorial or two and feel like you're ready to start building your app.
</p>




<h2>Step 2-b. Building Your Own Project</h2>




<p>
  In this step, you're going to be building your own project. Not following tutorials, not following directions. You're going to have to do everything yourself - but this is where you'll learn the most.
</p>




<h3>How to Pick a Project (this is the hardest part)</h3>




<p>
  In my experience, picking a project to work on is the most difficult part of this process. This is because if you pick a project that is a lousy idea, you just won't stick with it.
</p>




<p>
  For example, one time I tried building a diary app with Ruby on Rails for no reason. After building out some of the basic functionality, I realized that Google Drive does the job better and it gave me no reason to keep building the app - <strong>never try building something for no reason</strong>.
</p>




<h3>But coming up with a good project idea is hard...</h3>




<p>
  <strong>TRUE.</strong>
</p>




<h1>
  <strong>So here's my suggestion: Go out and sell your services.</strong>
</h1>




<h3><strong>Here's why:</strong></h3>


<p>
  <strong>If someone is paying you to build something, you're going to work your butt off to try and get everything right. You're going to be forced to learn at a super high speed in order to not mess anything up.</strong>
</p>




<h3><strong>BUT HOW?!</strong></h3>


<p>
  <strong>A lot of people want websites or web applications built for them, but lack the money to hire developers.</strong> They have ideas, but they lack the skills to actually build them. This is their thought process: 
</p>




<p>
  "I have an idea that will make millions and will be the next (Facebook, Uber, replace popular start up name here) - <strong><em>if only I had a coder to build my app</em></strong>."
</p>




<p>
  <strong>This is where you come in.</strong> Find these people and talk to them. Offer your services for super cheap at first and <strong>make an offer so sweet that they have no reason to reject you.</strong>
</p>




<p>
  This was how I pitched myself to 2 guys who wanted to build a company based on a web app: <strong><em>"Yes, I am indeed a noob, but if you hire non-noobs, it will cost you tens of thousands. If you hire me, I can build out this app and it won't cost you tens of thousands. Instead, it will only be hundreds or maybe a couple thousand at most. Plus, if you don't like the website, you can decide not to use it and pay me nothing."</em></strong>
</p>




<h3><strong>This is why this worked (at least for me):</strong></h3>




<p>
  <strong>What was the number one thing they wanted?</strong> <em>Their idea to be built out.</em>
</p>




<p>
  <strong>What was their number one constraint?</strong> <em>Money.</em>
</p>




<p>
  <strong>If I were to pitch them, what would be their number one concern?</strong> <em>That I wasn't skilled enough and would be a waste of money.</em>
</p>




<p>
  <strong>My pitch incorporated all of these factors so that they had no reason to reject my offer.</strong> If they didn't like the website, they could scrap it and pay <strong><em>nothing</em></strong>.
</p>




<p>
  To initially build a portfolio, I personally think that it's a smart idea to price low and over-deliver (unless you're already experienced). As a side note, I did this when I first started my translation business as well and it worked that time as well. I priced my services lower than my competitors and over-delivered and built social proof.
</p>




<h2>Ask Yourself: Why exactly would they buy from me rather than somebody else?</h2>


<p>
  Would it be my price, my skill set, my past experiences, or some other factor?
</p>




<p>
  Since I had minimal skill to do the job, had no past experience, the only way I could differentiate was to set a lower price and work my butt off. And for a lot of people reading this article, I'm assuming this is probably the case.
</p>




<p><strong>So find somebody to build a website for, give a pitch that they can't turn down, and start working on the project.</strong> Once you pass this step, it's time to do anything you can do to finish the app and build something that would satisfy your clients.</p>




<p>
  This means Googling for solutions to any bugs/problems you might encounter, asking people questions, and finding solutions.
</p>




<h3>And <strong>this</strong> is where you'll be learning <strong>2x, 3x</strong> as fast as you would compared to going through more tutorials. <strong>You're forced to build out real-world ideas and forced to solve real-world problems.</strong></h3>




<h1>Examples</h1>




<p>
  I've given this advice to some people that were just starting out with their coding journey and it seems to have worked for them. One of my friends from <a href="http://www.thefirehoseproject.com" target="_blank">The Firehose Project</a>, Dany, asked for my advice. I told him mostly the same things that I laid out in this blog post and this was his response.
</p>


<p><img src="static/img/dany.png" alt="learning coding"></p>

<p>
  When I talked to him a couple of months after that, he told me that he took some of my advice and things were going quite well for him:
</p>


<p><img src="static/img/dany_2.png" alt="learning coding"></p>

<p>
  I've given the same advice to other people with the same results. It seems that it just makes sense - <strong>when you are forced to learn at an accelerated pace, you'll learn more quicker as a result.</strong>
</p>




<hr>




<p>
  Hopefully this blog post was somewhat helpful in motivating you to go out and grab a project that you can start working on (while maybe getting paid) to accelerate your learning speeds. This is something that's worked for me and the people around me, and I hope it works for the people reading this as well!
</p>



 ]]></content>
</entry>


  <entry>
  <title type="text">Using Spaced Repetition Software to Learn Programming Concepts</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Using-Spaced-Repetition-Software-To-Learn-Programming-Concepts.html" />
  <id>https://www.takehiromouri.com/Using-Spaced-Repetition-Software-To-Learn-Programming-Concepts</id>
  <published>2016-03-15T00:00:00Z</published>
  <updated>2016-03-15T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  As a programmer who still has so much to learn, I strongly feel that finding the right tools and methodologies in learning how to program is super important. Learning is a hard skill - especially when it comes to increasing your knowledge around textbook type subjects. Reading a textbook and going through lectures are not always the most entertaining, and it can easily lead to a unproductive study session.
</p>




<p>
  I was studying for one of my computer science classes when I stumbled across <a href="https://sivers.org/srs" target="_blank">this post</a> by Derek Sivers. He explains it perfectly, so there's really no point of me explaining it:
</p>




<p><em>
  "When you hear a new fact, it's forgotten pretty quickly unless it's brought back to the forefront of your mind repeatedly. You can do this haphazardly by immersing yourself in a language, for example, where the new words you learn will be brought up by chance occasionally. <strong>But memory research shows that the most effective and efficient time for a new fact to be remembered is right before you were about to forget it.</strong> Say if you learn a new word in a foreign language, you'd want to practice it again a few minutes after hearing it, then a few hours, then the next day, then in 2 days, then 5 days, then 10 days, 3 weeks, 6 weeks, 3 months, 8 months, etc. After a while it's basically permanently memorized with a rare reminder. <strong>Spaced Repetition Software does this for you, so you can just give it a bunch of facts you want to remember, then have it quiz you once a day, and it manages the intervals based on your feedback. After each quiz question, if you say that one was easy, it won't be introduced for a long time, but if you were stumped, then it'll ask it again in a few minutes, until you've got it.</strong>" - Derek Sivers
</em></p>




<p>
  Basically Spaced Repetition Software, or SRS, is a flash card software that is optimized to increase your chances of learning based on memory research. Pretty cool stuff - but like a lot of you (I'm assuming), <strong>I was kind of skeptical that this would actually work.</strong>
</p>




<h1>These were my questions:</h1>


<ol>
  <li>Is this applicable to programming? - is it better to simply just Google stuff and code?</li>
  <li>Would I stick with it?</li>
</ol>




<h1>And here are my answers:</h1>




<p>
  After actually trying Anki (a popular SRS) out for 3 weeks now, here are my thoughts:
</p>




<h3>Is this applicable to programming? - is it better to simply just Google stuff and code?</h3>


<p>
  <strong>Yes - and no.</strong>
</p>




<p>
  What I've found that for a lot of things, it's just faster for Google to memorize. For example, if I were to use SRS to try and memorize how to reverse a string in Ruby, I could make a flashcard to remind myself every now and then. On the other hand, it takes 2 seconds to find out how to reverse a string in Ruby, so it really doesn't make sense to memorize it. If Googling will take less time, you shouldn't be trying to memorize it.
</p>




<p>
  On the flip side, <strong>SRS is great for learning programming concepts</strong>. A lot of times (atleast for me), I read about a concept and understand it (at the time) and then gain the feeling of satisfaction. But then in a few days when a friend asks me about the concept, my memory is fuzzy or I just don't remember (even though I read about it and understood it a few days back). Once I started using SRS to recall my understanding, it got easier for me to not only recall the concept, but actaully apply it in practice.
</p>




<p>
  This is more of a topic of learning methodology than it is of SRS - <strong>you need to find ways to recall information in order to retain your knowledge.</strong> That's why many people are avid note takers. SRS is just another way of retaining information - except it's super efficient.
</p>




<h1>Would I stick with it?</h1>




<p>
  <strong>Yes.</strong>
</p>




<p>
  The great thing about Anki is that it becomes addictive - every day you start up Anki, and it provides you with flashcards to go over for the day. Once you go through the flashcards, it feels like you've learned so much in a matter of 10 or 15 minutes.
</p>




<p>
  The difference between Anki and regular Flash Card applications is that Anki removes all the unnecessary going-through of flash cards for you - <strong>if you felt the question was easy yesterday, it won't tell you to answer the flash card the next day.</strong> That means less flash cards and better learning.
</p>




<p>
  Doing Anki every day has been so easy for me, just because of the way it's designed. It was easy for me to start a habit of using Anki and there are tons of people that would say the same thing as well.
</p>




<hr>




<p>
  If you're currently trying to learn difficult programming concepts, then SRS might be the way to go. AnkiSrs is free open source software that you can download <a href="http://ankisrs.net/" target="_blank">here</a>.
</p>




<p>
  I would highly recommend reading Derek Siver's post on SRS <a href="https://sivers.org/srs" target="_blank">here</a>, as it goes through the entire learning methodology involved in using SRS.
</p>



 ]]></content>
</entry>


  <entry>
  <title type="text">Coding Bootcamps vs Computer Science</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Coding-Bootcamps-vs-Computer-Science.html" />
  <id>https://www.takehiromouri.com/Coding-Bootcamps-vs-Computer-Science</id>
  <published>2016-03-03T00:00:00Z</published>
  <updated>2016-03-03T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h1>Coding Bootcamps vs Computer Science</h1>




<p>
  Joining a coding bootcamp was the best choice I made in my college careerâââand it could be the best choice you make as well, especially if you have never coded before. Coding bootcamps are a fairly new thingâââ<strong>they are intensive training schools where students can learn programming to a professional level in an extremely short period of time (12 ~ 15 weeks). By omitting computer science topics that arenât really used in actual work and focusing solely on the practical skills that are used most in the industry, bootcamps are able to teach programming in an extremely short period of time.</strong> These coding bootcamps are mostly targeted towards adults who are looking for a career change or want to start their own businesses.
</p>




<p>
  I was an outlier, joining an online coding bootcamp called <a href="http://www.thefirehoseproject.com" target="_blank"><a href="http://www.thefirehoseproject.com" target="_blank">theFirehoseProject</a></a> as a college junior. Despite the fact that coding bootcamps usually arenât targeted towards college undergraduates like me, Iâve found that going through the bootcamp as an undergrad has been one of the most rewarding experiences in my college life. <strong>Hereâs why:</strong>
</p>




<h1>Coding Bootcamps vs Computer Science</h1>




<p>
   <strong>How are coding bootcamps different from traditional Computer Science courses?</strong> This is a question that gets asked a lot, and is a question that I was asking before I joined. Here are my impressions based on my own experiences of experiencing both.
</p>




<p>
  <strong>Coding bootcamps focus greatly on applicable skills and modern technologies being used by the industry.</strong> Many focus on teaching Ruby, a modern programming language, which is also a great first language since it is a âprogrammer friendlyâ language and is relatively easier to grasp compared to a language like C or Java.
</p>




<p>
  On the other hand, <strong>many computer science classes start with relatively difficult languages like C or Java.</strong> These languages might be essential to learn as a coder, but they tend to be the difficult for beginners to grasp, and <strong>many people quit coding at this point. I was one of these people, when I tried learning programming with CS50, a famous online course offered by Harvard.</strong> The course itself was fantastic and high quality, but the programming language I was taught was C. Although this might be pedagogically better as it forces you to learn the intricacies of programming, it might also scare beginners away, <strong>giving the false impression that learning a programming language is difficult to learn, when in fact, it isnât.</strong>
</p>


<p><figure>
  <img src="static/img/mathishard.jpg" alt="Coding Bootcamps vs Computer Science" />
  <figcaption>Mathematics and computer science go hand in handâââbut you donât need so much math for most types of programming youâll actually do in your job</figcaption>
</figure></p>

<p>
  <strong>Another point to make is that a lot of intermediate to advanced computer science courses require some mathematics and thus have a higher barrier to entry.</strong> Mathematical thinking is important, but is only required in a limited variety of programming jobs. Coding bootcamps do a great job of taking out a lot of the unnecessary math for developing web applications in their curriculum, thus creating a low barrier to entry.
</p>




<p>
  Since the objective of bootcamps are to train total newbie programmers into professionals in a short period of time, the top bootcamps do a great job in teaching things in a way that a complete beginner can understand. The curriculum and lesson style at <a href="http://www.thefirehoseproject.com" target="_blank">theFirehoseProject</a> was indeed, extremely easy to understand as a beginner. After 7 weeks upon training with <a href="http://www.thefirehoseproject.com" target="_blank">theFirehoseProject</a>, I was able to land a job as a web developer at a local start up. With that, I was able to pay off most of my bootcamp tuition fees, so already it was a great investment.
</p>


<p><img src="static/img/csinfographic.jpg" alt="Coding Bootcamps vs Computer Science"></p>

<h1>How new opportunities opened up as I learned to code</h1>




<p><strong>Being able to code opened up a tremendous amount of opportunities on and off campus.</strong></p>




<p>
  In my 8th week, I participated in a student hackathon called HackNC (hackathons are typically events where teams try to hack together something cool within a 24 ~ 48 hour timeframe). I worked with a team of 2 other developers and 1 business student, and we were able to hack together a minimally viable product after working 24 hours straight. I was in charge of doing a lot of the front end work which I was already used to doing from the curriculum at <a href="http://www.thefirehoseproject.com" target="_blank">theFirehoseProject</a>. We ended up receiving 3 prizes at the hackathon along with offers from multiple companies in my first hackathon. The team that I worked with at that event are still buddies and it was overall a great experience that was made possible because I joined a coding bootcamp.
</p>


<p><figure>
  <img src="static/img/guru.png" alt="Coding Bootcamps vs Computer Science">
  <img src="static/img/guru_2.png" alt="Coding Bootcamps vs Computer Science">
  <figcaption>Front end stuff I hacked together at the hackathon after 9 weeks of training at <a href="http://www.thefirehoseproject.com" target="_blank">theFirehoseProject</a></figcaption>
</figure></p>

<p>
  <strong>Outside of school, being able to code also led me to gaining some work experience.</strong> I saw a Facebook post by a person who wanted to build a web application for their new business idea. Plus, they were willing to pay for it. I was only in my 7th week, but figured Iâd at least give it a try. Since I had already built a couple of web applications, I told them that despite being relatively a beginner at coding, I knew how to build basic web applications and could work with them to build out their idea for cheaper. They also liked the idea of giving a college kid some experience, as well as the costs that they were able to cut, and so they hired me (that gig alone paid for my tuition at the bootcamp).
</p>




<h1>If youâre in college why didnât you just take computer science courses?</h1>




<p>
  Well you might be thinking by now, <i><strong>if youâre in college and wanted to learn how to code, why didnât you just take Computer Science courses in the first place?</strong></i>
</p>




<p><strong>The answer to this question is simple: I thought I wasnât smart enough to learn how to code.</strong></p>




<p>
  <strong>The common misconception is that coding is a super difficult skill to learn. Itâs not.</strong> You just have to have the right support system, motivation, and resources to overcome the initial barriers that you might face when starting out. I learned that through joining a bootcamp.
</p>


<p><figure>
<img src="static/img/banghead.jpg" alt="Coding Bootcamps vs Computer Science" style="width:200px;margin: 0 auto;display:block">
<figcaption>Me when I first tried to learn how to code through a computer science course</figcaption>
</figure></p>

<p>
  If I hadnât joined a bootcamp, I wouldnât have decided to not only take computer science courses, but also major in it as well. Although being able to code was a dream for me, I tried and I failed with my initial dab at it with CS50, the Harvard CS course I mentioned before. The course taught in C and immediately went into sorting algorithms. This gave me the initial impression that learning to program was hard.
</p>




<p>
  <strong>But the truth is, learning how to program isnât as hard as you might think. You just need to start with a programmer friendly language with an awesome support system and friendly community. Thatâs what bootcamps are able to provide.</strong>
</p>




<p>
  So if youâre a college student and youâve been wanting to learn programming but just thought it wasnât for you, <strong>take a look at some top coding bootcamps</strong> (some bootcamps are apparently not worth the money so make sure to look at the top schools). You might be surprised to find that <strong>anyone can learn how to code given the right resources. Once you start learning how to code, youâll see new opportunities open up to you that youâve never realized before.</strong>
</p>




<h3>
  I donât think that coding bootcamps can replace computer science courses at this point in timeâ they are just two different things. Computer science is a study of computers and not just simply programming. On the other hand, coding bootcamps equip you with practical skills to build basic web applications and join a team as a junior developer.
</h3>


<p></p>

<p>
  So if youâre interested in learning how to code but donât want to get into the computer science topics, then joining a bootcamp might be the right choice for you.
</p>




<h3>
  Hereâs a list of bootcamps that Iâve heard great things about that you can take a look at: 
</h3>




<p>
  <a href="http://www.thefirehoseproject.com/" target="_blank"><a href="http://www.thefirehoseproject.com" target="_blank">The Firehose Project</a></a>âââA extremely reasonably priced online Ruby on Rails coding bootcamp ($4,000) with a super helpful team and supporting community. With weekly mentor sessions with top notch developers, you can really grow at a fast pace as a developer. The curriculum is intensive, where you get the best of both worlds with a combination of practical web development skills with computer science topics such as Data Structures and Algorithms. Itâs also perfect for people that donât want to quit their jobs and spend a ton of money. I personally recommend it for most people because of it's learn by doing approach and algorithm training that is necessary to succeed in technical job interviews. The student community is very active and there are always interactions going on in the private Slack channel. The mentors are top notch developers, the curriculum is top notch, and overall I highly recommend the Firehose Project.
</p>




<p>
  <a href="http://www.hackreactor.com/" target="_blank">HackReactor</a>âââThis bootcamp costs $18,000 to enroll, but itâs supposed to be well worth the money. If you are looking to go to a top notch bootcamp and are willing to pay the money, HackReactor is probably the bootcamp for you.
</p>




<p>
  <a href="http://www.fullstackacademy.com/" target="_blank">Fullstack Academy</a>âââAlso another immersive bootcamp like HackReactor. Their student projects are super impressive, which is always a great sign.
</p>




<p>
  <a href="http://www.makersquare.com/" target="_blank">Makersquare</a>âââSimilar to HackReactor and Fullstack Academy. Full time coding bootcamps with a focus on JavaScript frameworks. They claim to have high rates of graduates getting jobs.
</p>



 ]]></content>
</entry>



</feed>
