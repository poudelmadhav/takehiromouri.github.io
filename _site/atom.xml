<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  
    <title type="text" xml:lang="en">Takehiro Mouri - Ruby on Rails Developer</title>
    <link type="application/atom+xml" rel="self" href="https://www.takehiromouri.com/atom.xml"/>
  
  <link href="https://www.takehiromouri.com/"/>
  <id>https://www.takehiromouri.com/</id>
  <updated>2016-10-12T16:24:44Z</updated>
  <author>
    <name>Takehiro Mouri</name>
    <email>takehiromouri@gmail.com</email>
  </author>
  <rights type="text">Copyright Â© 2016 Takehiro Mouri. All rights reserved.</rights>
  
  <entry>
  <title type="text">Should I learn how to code?</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Should-I-Learn-How-to-Code.html" />
  <id>https://www.takehiromouri.com/Should-I-Learn-How-to-Code?</id>
  <published>2016-10-12T00:00:00Z</published>
  <updated>2016-10-12T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>I&rsquo;m pretty sure that there are other people like me who like building things and would rather do that instead of whatever work they are involved in that they aren&rsquo;t fit for. On the other hand, I have the impression that many people think that learning how to code is difficult and only for the mathematically capable (this was me in the past). But in my personal experience and looking at other examples as well, despite the common image of whiz kid programmers (think Mark Zuckerburg in Social Network), coding isn&rsquo;t that difficult to learn. And it certainly doesn&rsquo;t require high levels of computational skills, at least to start out.</p>

<p>There are so many free online resources that anyone can use to learn the basics of programming. There are also many wonderful paid resources to dive deeper. I really enjoy teaching people how to code because I sincerely believe that it&rsquo;s a skill/hobby that is not only a viable career option, but is also fun.</p>

<h4>Should I learn how to code?</h4>

<p>With that being said, I don&rsquo;t think everyone should be a programmer, nor should they be forced to be. Learning how to code is a good thing, but it doesn&rsquo;t mean that everyone should necessarily pursue a career in programming.</p>

<p>There tends to be a lot of articles suggesting that everyone should learn how to code. Education is moving towards the direction of making it mandatory for students to learn programming from a young age as well. This is a great thing in that it will certainly open a lot of doors for a lot of people. However, I&rsquo;m skeptical on whether most of the classes on programming that these students will enroll in will teach programming in a way that excites them. Sure, they can learn basic syntax and (be forced to) build some simple games, but will it be something that excites students? Or will it have an unfortunate effect of giving them a false impression that programming is boring and lead potential programmers to shy away from it?</p>

<p>I also think that even if one tries to force him/herself into becoming a programmer, I don&rsquo;t think it really works that way. You either like it and you spend lots of time doing it, and therefore become a good programmer, or you either don&rsquo;t like it and leave it.</p>

<p>That&rsquo;s why I think it&rsquo;s crucial to teach in a way that excites and motivates students to actually <em>build</em> things, instead of worrying about the complicated theoretical matters that may be involved with programming. I believe that the more the indiviual <em>likes</em> to program intrinsically, the better the individual will become at programming.</p>

<p>Learning how to program is a lifelong pursuit; like any thing that involve various elements, programming is easy to learn, but hard to master. However, although I certainly can&rsquo;t say that I have mastered programming in any way, I can say with confidence that the small rewards of pursuing mastery is extremely worthwhile.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">How learning how to code has changed my life</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/How-learning-how-to-code-has-changed-my-life.html" />
  <id>https://www.takehiromouri.com/How-learning-how-to-code-has-changed-my-life</id>
  <published>2016-10-12T00:00:00Z</published>
  <updated>2016-10-12T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>I always have liked building things.</p>

<p>I grew up in the US, where a lot of nerds play a lot of video games and spend a lot of time with computers. One of my best friends growing up had a family full of computer people, and my other best friend was also really into playing video games.</p>

<p>Like many programmers, I started out playing a bunch of video games growing up, and in an attempt to beat other gamers, I would try out different hacks (wall-hacks, auto-aim, etc.). Sometimes the patches would work, sometimes they would not work. I spent a lot of time tinkering with the computer to get these things to try and work.</p>

<p>When I was around 10 years old, I built my first crappy third person shooter. I used some kind of game development software and created an extremely buggy, but playable third person shooter with bots that move right and left across the screen. Although I don&rsquo;t recall anyone but myself playing the game, I do remember spending quite a lot of time on it.</p>

<p>I also remember playing Runescape (an MMORPG) in the early days, and using macros to automate actions to increase my character&rsquo;s level. Unfortunately Runescape put in detection for these kind of macros, and that account soon got banned.</p>

<p>After I moved to Japan when I was 13, surprisingly many of the people I went to school with didn&rsquo;t play much PC video games, and they also didn&rsquo;t know much about using a computer. I naturally faded away from computers and gradually shifted towards playing basketball.</p>

<p>High school for me was odd - though I knew I was an introverted nerd by nature, I found myself playing basketball extremely intensely. We were winning prefectural championships, I was selected as a prefectural representative (mostly for the reason that I am considered to be super tall in Japan), and we played in national tournaments.</p>

<p>On the other hand, despite my involvement in athletic activities, I still found myself wanting to tinker with computers. So I started a blog about basketball.</p>

<p>As a high school kid, I wanted to make some money, but my time limitations being a student-athlete didn&rsquo;t allow me to take on any part-time jobs - so I searched for ways to make money doing what I liked; using computers. I first started by signing up to one of those websites where you make extremely small amounts of money by clicking on ads.</p>

<p>I quickly realized this was inefficient, boring, and a waste of time, so I started looking for something that would be more interesting and worthwhile. I soon found out that some people make money writing blogs through ads.</p>

<p>As naive as I was, that was how I got started writing my basketball blog. I googled around for SEO, learned some basic HTML and CSS, and read a bunch of articles about content marketing.</p>

<p>I learned how important it is to determine a specific target audience and write the article as if I were speaking to them. I also learned that to reach a larger audience, I needed to write a bunch of articles with high quality (quantity and quality). I also learned how to research for keywords, where to place Google ads (I&rsquo;m not sure if these things still apply), and a bunch of other things. I probably only learned the surface of these things, but it was enough to make me around 100 USD per month from Google ad revenues.</p>

<p>This was my first experience of making money without actually working for a company. What I realized was that I could simply work part-time for a company and make the same amount by working for a week or so. Thus I left my blog (although it continued making some revenue for some months).</p>

<p>Fast forward to the present and I&rsquo;m still tinkering with computers. I write a lot of code because it&rsquo;s a lot of fun for me, it&rsquo;s an intense hobby I have and I never get tired of it.</p>

<p>Once I learned how to code, my life has changed dramatically.</p>

<h4>I have a hobby that is a viable career</h4>

<p>I&rsquo;ve always had a bunch of hobbies that I would spend a lot of time with, like playing music, playing basketball, playing video games, etc. but they were never viable career options. When I was a naive middle school kid, I once tried persuading my parents that I wanted to go to Berklee School of Music and become a professional jazz drummer. My parents unsuprisingly discouraged me from that career option, saying that there&rsquo;s no money in it; which I completely agree with now that I reflect back on it.</p>

<p>Hobbies may inheritenly be a difficult career option for most cases, in the sense that hobbies are by definition, activities that are done in one&rsquo;s leisure time for one&rsquo;s pleasure, and not necessary for the fulfillment of others. Since money is just a currency that is exchanged for the value you create for society, unless you are solving someone else&rsquo;s problems or meeting some kind of need in some kind of way, it&rsquo;s really unlikely that you&rsquo;ll be making a career off of it. Unless you are in the top rank of musicians or gamers, it&rsquo;s really hard to create value for others, since there is a relatively limited market for these careers as of now.</p>

<p>On the other hand, programming has the same addictive nature that things like music or video games have, in that there is never an end to learning, and you can always get better. It&rsquo;s also easy to measure how competent you are compared to other people (just like how you can compare how much better you are at CounterStrike compared to your rival friend).</p>

<p>One of the things that is different is that there is a high demand for programmers compared to musicians or gamers. This makes sense since a lot of things are now automated or is starting to become automated with software, which means that programmers are needed to create that software.</p>

<p>A high demand for programmers also means that programmers have the ability to solve problems - and when you can solve problems, you tend to get some kind of value in return.</p>

<h4>I have more freedom</h4>

<p>There are many viable career options, but programming is somewhat of a rare one, since the only essential things you need to code and be productive is a laptop and good wifi. I&rsquo;ve worked remotely for a lot of projects while making a fair amount of money. A lot of companies are allowing developers to work remotely, and it seems that this trend might continue as there are more and more tools being developed to collaborate online with a team.</p>

<h4>I am back to creating things</h4>

<p>I&rsquo;ve always spent a lot of time making things because I like to do so. Coding has allowed me to pursue building things again.</p>

<h4>I can create a product for free</h4>

<p>You don&rsquo;t <em>have</em> to work for a company if you have something that you want to pursue. Right now I&rsquo;m working on a start up in Nepal that teaches people web development through a combination of an online curriculum and 1 on 1 personal mentor sessions.</p>

<p>Creating the platform is one of the things I enjoy most - not only do I get to code, I get to code the features that I want to build. I don&rsquo;t need to pay anyone to create the software (that would cost a lot of money), I just build it myself.</p>

<h4>I learn something new everyday</h4>

<p>I literally learn something new everyday. There are just limitless amounts of things to know as a programmer which motivates me and forces me in a way to continue learning. I am sure that when I look back at the code I am writing today in 2 or 3 years, or maybe even a couple of months, I will surely be disappointed in myself for that lack of consideration and immaturity of design.</p>

<h4>I can fail</h4>

<p>Bugs are encountered numerous times every day and software never works perfectly on the first try. Thus I make a lot of errors everyday. This is normal and I like the idea that I don&rsquo;t have to be perfect on the first try. I seems cliche, but I never liked the idea of how tests in most schools grade you on the performance of one test. It&rsquo;s efficient for sure, but it doesn&rsquo;t really capture and reflect the nature of most types of work. If one of the main purposes of education is to nurture more productive human beings, then why create tests that are opposite of what is practiced in most types of real work?</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Practical Object Oriented Design in Ruby Book Notes</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Practical-Object-Oriented-Design-in-Ruby-Book-Notes.html" />
  <id>https://www.takehiromouri.com/Practical-Object-Oriented-Design-in-Ruby-Book-Notes</id>
  <published>2016-09-10T00:00:00Z</published>
  <updated>2016-09-10T00:00:00Z</updated>
  <content type="html"><![CDATA[ <ul>
<li><p>The programming techniques that make code a joy to write overlap with those that most efficiently produce software</p></li>
<li><p>The techniques of object-oriented design solve both the moral and the technical dilemmas of programming; following them produces cost- effective software using code that is also a pleasure to work on.</p></li>
<li><p>Design does not matter unless there will be change to the application - but there is always change to the application</p></li>
<li><p>Object-oriented design is about managing dependencies. It is a set of coding techniques that arrange dependencies such that objects can tolerate change.</p></li>
<li><p>Dependent objects would wreak havoc because changing one object forces change upon another, leading another object to change etc.</p></li>
<li><p>You must not only write code for the feature you plan to deliver today, you must also create code that is amenable to being changed later.</p></li>
<li><p>Practical design does not anticipate what will happen to your application, it merely accepts that something will and that, in the present, you cannot know what. It doesnât guess the future; it preserves your options for accommodating the future. It doesnât choose; it leaves you room to move.</p></li>
<li><p>The purpose of design is to allow you to do design later and its primary goal is to reduce the cost of change.</p></li>
</ul>


<!-- 
* **SOLID**
  * Single Responsibility
  * Open-closed
  * Liskov Subtitution
  * Interface Segregation
  * Dependency Inversion -->


<ul>
<li><p>Studies were done to measure code quality, and indeed these design principles lead to high quality code</p></li>
<li><p>The Agile experience is that this collaboration produces software that differs from what was initially imagined; the resulting software could not have been anticipated by any other means.</p></li>
<li><p>BUFD stands for Big Up Front Design</p></li>
<li><p>Because Agile processes guarantee change, the ability to make changes to the code is necessary. Otherwise, everytime you would need to rewrite a bunch of code.</p></li>
<li><p>SLOC (source lines of code) to measure programmer contribution says nothing about overall equality</p></li>
<li><p>Object-oriented programming is object-oriented relative to non object-oriented, or procedural, programming.</p></li>
<li><p>Class-based OO languages like Ruby allow you to define a class that provides a blueprint for the construction of similar objects.</p></li>
<li><p>The trick to getting the most bang for your design buck is to acquire an understanding of the theories of design and to apply these theories appropriately, at the right time, and in the right amounts. Design relies on your ability to translate theory into practice.</p></li>
</ul>


<h2>Designing Classes with a Single Responsibility</h2>

<ul>
<li><p>The classes you create define a virtual world, and will affect how you think about your application forever.</p></li>
<li><p>Code should be <strong>TRUE</strong></p>

<ul>
<li>Transparent

<ul>
<li>The consequences of change should be obvious in the code that is changing and in distant code that relies upon it</li>
</ul>
</li>
<li>Reasonable

<ul>
<li>The cost of any change should be proportional to the benefits the change achieves</li>
</ul>
</li>
<li>Usable

<ul>
<li>Existing code should be usable in new and unexpected contexts</li>
</ul>
</li>
<li>Exemplary

<ul>
<li>The code itself should encourage those who change it to perpetuate
these qualities</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>A class should do the smallest possible useful thing; that is, it should have a single responsibility.</strong></p></li>
<li><p>A class that has more than one responsibility is difficult to reuse. The various responsibilities are likely thoroughly entangled within the class. If you want to reuse some (but not all) of its behavior, it is impossible to get at only the parts you need. You are faced with two options and neither is particularly appealing.</p></li>
<li><p>How can you determine if the Gear class contains behavior that belongs somewhere else?</p>

<ul>
<li><p><strong>One way is to pretend that itâs sentient (act as if it has feelings) and to interrogate it.</strong></p>

<ul>
<li>For example, âPlease Mr. Gear, what is your ratio?â seems perfectly reasonable, while âPlease Mr. Gear, what are your gear_inches?â is on shaky ground, and âPlease Mr. Gear, what is your tire (size)?â is just downright ridiculous.</li>
</ul>
</li>
<li><p><strong>Another way is to attempt to describe it in one sentence</strong></p>

<ul>
<li>If the explanation requires the use of words such as <code>and</code> or <code>or</code>, then it most likely has more than one responsibility.</li>
</ul>
</li>
</ul>
</li>
<li><p><strong>When everything in a class is related to its central purpose, the class is said to be highly cohesive or to have a single responsibility.</strong></p></li>
<li><p>When faced with an imperfect and muddled class like Gear, ask yourself: âWhat is the future cost of doing nothing today?â</p></li>
<li><p>This âimprove it nowâ versus âimprove it laterâ tension always exists. Applications are never perfectly designed. Every choice has a price. A good designer understands this tension and minimizes costs by making informed tradeoffs between the needs of the present and the possibilities of the future.</p></li>
<li><p>Methods should also only have one single responsibility</p></li>
<li><p>If code inside a method needs a comment, extract that into a seperate method - the method name will serve the same purpose as the old comment.</p></li>
<li><p>Small methods encourage reuse</p></li>
<li><p>If you have a muddled class with too many responsibilities, seperate those responsibilities into different classes.</p></li>
<li><p>An object has a dependency when it knows</p></li>
<li><p>A class should know just enough to do its job and not one thing more</p></li>
<li><p><strong>Dependency Injection</strong> - moving an explicit dependency to an implicit one.</p></li>
<li><p>When a message requires arguments, not only can you not avoid having knowledge of those arguments, you also require that those arguments be passed in a specific fixed order.</p>

<ul>
<li>To avoid this, initialize the arguments using a hash</li>
</ul>
</li>
<li><p>Use the fetch method to set defaults instead of using ||</p></li>
<li><p>Depend on things that change less often than you do</p></li>
<li><p>When a class reveals al, it causes difficult to reuse objects</p></li>
<li><p>Comparison of classes vs kitchens - the class exists to fulfill a single responsibility but implements many methods</p></li>
<li><p>The context that an object expects has a direct effect on how difficult it is to reuse.</p></li>
<li><p>Distinction between what <strong>what</strong> and <strong>how</strong></p></li>
<li><p>Blind trust is a keystone of object-oriented design. It allows objects to collaborate without binding themselves to context and is necessary in any appliation that expects to gow and change</p></li>
<li><p>Duck types are public interfaces that are not tied to any specific class</p></li>
</ul>

 ]]></content>
</entry>


  <entry>
  <title type="text">What does it take to become a web developer?</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/What-does-it-take-to-become-a-web-developer.html" />
  <id>https://www.takehiromouri.com/What-does-it-take-to-become-a-web-developer</id>
  <published>2016-09-05T00:00:00Z</published>
  <updated>2016-09-05T00:00:00Z</updated>
  <content type="html"><![CDATA[ <h3>If you&rsquo;re just starting to dive into the field of web development, you&rsquo;re probably nervous about whether or not you are going to be able to actually become a programmer or not.</h3>

<p>I know, because I also felt the same way when I first started. I had close to no experience in coding, I didn&rsquo;t know if I was smart enough, and I didn&rsquo;t know if learning web development would actually be worth my time.</p>

<p>There are certain traits that I have found many software developers to share. While the traits may seem innately intrinsic, they are rather attitudes that can be developed.</p>

<h1>1. Motivation</h1>

<p>The most important trait to have when learning web development is motivation. Without motivation, no matter how smart you may be, you will never be able to learn web development.</p>

<p>Learning how to code initially is extremely difficult. At first, it seems like an impossible task. Most people who have never reached the level required to start making applications imagine coding as being incredibly difficult and a feat for the intelligent. I thought the same as well, thinking that coding is something for smart people.</p>

<p>But learning how to code is more of a mental game. When you first start out, you&rsquo;ll run into countless bugs, and you&rsquo;ll have no idea how to solve them at first. If you don&rsquo;t have the motivation, instead of trying to solve those problems, you&rsquo;ll most likely quit.</p>

<p>So before even considering learning to code, it&rsquo;s important to ask yourself if you have the proper motivation to start learning in the first place. If you feel an inner motivation coming within you that is urging you to learn, then chances are, you will be learning extremely quickly.</p>

<h1>2. Grit</h1>

<p>Debugging errors in the inital phase is both extremely time consuming and frustrating. You&rsquo;ll Google the error message, you&rsquo;ll try out different solutions, and most of the times you still won&rsquo;t be able to fix the bug.</p>

<p>As a software developer, it&rsquo;s common to be stuck on a bug for hours and hours. If you don&rsquo;t have the grit to work on the problem until it is fixed, you won&rsquo;t progress as a developer.</p>

<h1>3. Ability to Figure Things Out</h1>

<p>As a software developer, your job is solve problems. A common trait amongst developers is the ability to figure things out.</p>

<p>Figuring things out is essentially just breaking down big problems into small pieces, then solving them step by step. People that are good at this also tend to be extremely fast at breaking things down, trying different solutions, and figuring out what works and what doesn&rsquo;t.</p>

<h1>4. Ability to Self-Learn</h1>

<p>Software engeering is a pursuit in which there is no limit to the amount of knowledge and skills there are to learn. Most software engineers are passionate about what they do, and find the job interesting and fulfilling, thus spend a lot of time learning things on their own.</p>

<p>However, most of the times, there won&rsquo;t be a teacher teaching you everything you need to know - most learning is done by reading books, reading blogs, and actually implementing new knowledge.</p>

<p>Self-learning is a crucial way to progress forward as a developer.</p>

<p>In the end, all of these things are really come down to your attitude towards learning in my opinion. They aren&rsquo;t traits that are impossible to acquire - they&rsquo;re simply traits that can be acquired through a shift in attitudes.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">Strings vs Symbols in Ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Strings-vs-Symbols-in-Ruby.html" />
  <id>https://www.takehiromouri.com/Strings-vs-Symbols-in-Ruby</id>
  <published>2016-08-15T00:00:00Z</published>
  <updated>2016-08-15T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  Symbols can be really confusing when you first use Ruby - what are the differences between Strings and Symbols?
</p>




<h3>Symbols are Faster</h3>




<p>
  Why are symbols faster?
</p>




<p>
  Consider the following:
</p>




<pre><code class="ruby">
string_1 = "Hello"
string_2 = "Hello"
</code></pre>




<p>
  Even if it has the same value, we are creating a new string. In other words, in the above example, we have manufactured two strings with the value of <code>"Hello"</code>.
</p>




<pre><code class="ruby">
string_1 = "Hello"
string_2 = "Hello"

string_1.object_id
# => 70209310447280
string_2.object_id
# => 70209310428440
</code></pre>




<p>
  However, with symbols this isn't the case.
</p>




<pre><code class="ruby">
string_1 = :hello
string_2 = :hello

string_1.object_id
# => 1149468
string_2.object_id
# => 1149468
</code></pre>




<p>
  In this case, both <code>:hello</code>s are exactly the same, they are not created twice.
</p>




<p>
  Since there can only be one instance of any symbol, comparison is much faster with symbols compared to strings. With strings, there can be multiple instances of strings with the same value, making the comparison relatively slower.
</p>




<p>
  Moreover, comparison of symbols are a O(1) comparison, so they are super efficient.
</p>




<h3>When to use symbols</h3>




<p> 
  Symbols are <strong>immutable</strong>. This means that once you create a symbol, you can't change it.
</p>




<p>
  With strings, you have handy methods like <code>upcase!</code> or <code>reverse!</code>, but symbols do not have that capability.
</p>




<p>
  <strong>This is why symbols are great for using when you are representing something that shouldn't change.</strong>
</p>



 ]]></content>
</entry>


  <entry>
  <title type="text">Tips for understanding the each loop in ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Tips-for-understanding-the-each-loop-in-ruby.html" />
  <id>https://www.takehiromouri.com/Tips-for-understanding-the-each-loop-in-ruby</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  I've had some students ask me about the <code>.each</code> loop in ruby :D Hopefully I can clarify some things.
</p>




<h3>Different Ways to Write .each Loop</h3>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span></p>

<p><span class="c1"># one way to loop</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">item</span> <span class="p">}</span></p>

<p><span class="c1"># another way to loop</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">item</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">item</span>
<span class="k">end</span></code></pre></figure></p>

<p>
  Above, we see two ways to write the <code>each</code> loop. Which one is better?
</p>




<p>
  The answer is, it depends. If the code is really short, then it makes sense to write it as a one liner. But if it's longer, it's better to write it as a <code>do</code> <code>end</code> block.
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="p">,</span> <span class="mi">6</span><span class="p">,</span> <span class="mi">7</span><span class="p">,</span> <span class="mi">8</span><span class="p">,</span> <span class="mi">9</span><span class="p">,</span> <span class="mi">10</span><span class="o">]</span></p>

<p><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="p">{</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span> <span class="nb">puts</span> <span class="n">number</span> <span class="p">}</span>
<span class="c1"># this is better as one liner</span></p>

<p><span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
  <span class="nb">puts</span> <span class="s2">&quot;Hello World&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;Another thing&quot;</span>
  <span class="nb">puts</span> <span class="s2">&quot;Do another thing&quot;</span>
<span class="k">end</span>
<span class="c1"># this is better with each do, since doing this in </span>
<span class="c1"># one line would be very messy :)</span></code></pre></figure></p>

<p>
  In ruby, there are often multiple ways of writing code. Ruby developers tend to like shorter and more concise code :) For example, the <code>if</code> statement can even be written as a one-liner:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">if</span> <span class="n">some_condition</span>
  <span class="nb">puts</span> <span class="s2">&quot;TECHRISE students are awesome&quot;</span>
<span class="k">end</span></p>

<p><span class="c1"># the above is OK, but we can rewrite it like this</span></p>

<p><span class="nb">puts</span> <span class="s2">&quot;TECHRISE students are awesome&quot;</span> <span class="k">if</span> <span class="n">some_condition</span></p>

<p><span class="c1"># this is considered to be cleaner and many ruby programmers</span>
<span class="c1"># prefer this style</span></code></pre></figure></p>

<p>
  Pretty cool right? :)
</p>




<h3>What is this || thing?</h3>




<p>
  When you are using <code>each</code> loops, you'll encounter these <code>||</code> things. You're probably wondering what these are :)
</p>




<p>
  Let's take a look at the following:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span></p>

<p><span class="c1"># this will print out </span>
<span class="c1"># 1</span>
<span class="c1"># 2</span>
<span class="c1"># 3</span>
<span class="c1"># 4</span>
<span class="c1"># 5</span></code></pre></figure></p>

<p>
  Notice how we have <code>|number|</code>. These placeholders only work within the loop and not outside:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">number</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">number</span>
<span class="k">end</span></p>

<p><span class="nb">puts</span> <span class="n">number</span></p>

<p><span class="c1"># returns an error =&gt; &quot;NameError: undefined local variable or method `number&#39; for main:Object&quot;</span></code></pre></figure></p>

<p>
  You can name these placeholders whatever you want:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">momo</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">momo</span>
<span class="k">end</span></p>

<p><span class="c1"># still prints out all of the numbers</span></p>

<p><span class="n">numbers</span> <span class="o">=</span> <span class="o">[</span><span class="mi">1</span><span class="p">,</span> <span class="mi">2</span><span class="p">,</span> <span class="mi">3</span><span class="p">,</span> <span class="mi">4</span><span class="p">,</span> <span class="mi">5</span><span class="o">]</span>
<span class="n">numbers</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">dog</span><span class="o">|</span>
  <span class="nb">puts</span> <span class="n">dog</span>
<span class="k">end</span></p>

<p><span class="c1"># still prints out all of the numbers</span></code></pre></figure></p>

<p>
  However, we should name the placeholder something that makes sense.
</p>




<ul>
  <li>Be careful of pluralization</li>
  <ul>
    <li>If it's singular, name it a singular placeholder (<code>number</code>)</li>
    <li>If it's pluralization, name it a plural placeholder (<code>numbers</code>)</li>
  </ul>
  <li>The name should represent what the item is</li>
</ul>


<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">A better example of the sort_by method for hashes in Ruby</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/A-better-example-of-the-sort_by-method-for-hashes-in-Ruby.html" />
  <id>https://www.takehiromouri.com/A-better-example-of-the-sort_by-method-for-hashes-in-Ruby</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  Codecademy is great for learning the fundamentals, but at the same time sometimes they use really confusing examples.
</p>




<p>
  For example, in one of the lessons, you have to write code that looks like this:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="nb">puts</span> <span class="s2">&quot;Enter Text:&quot;</span>
<span class="n">text</span> <span class="o">=</span> <span class="nb">gets</span><span class="o">.</span><span class="n">chomp</span></p>

<p><span class="n">words</span> <span class="o">=</span> <span class="n">text</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span></p>

<p><span class="n">frequencies</span> <span class="o">=</span> <span class="no">Hash</span><span class="o">.</span><span class="n">new</span><span class="p">(</span><span class="mi">0</span><span class="p">)</span></p>

<p><span class="n">words</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">x</span><span class="o">|</span>
    <span class="n">frequencies</span><span class="o">[</span><span class="n">x</span><span class="o">]</span> <span class="o">+=</span> <span class="mi">1</span>
<span class="k">end</span></p>

<p><span class="n">frequencies</span> <span class="o">=</span>  <span class="n">frequencies</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="n">k</span><span class="p">,</span> <span class="n">v</span><span class="o">|</span> <span class="n">v</span><span class="p">}</span>
<span class="n">frequencies</span><span class="o">.</span><span class="n">reverse!</span></code></pre></figure></p>

<p>
  What is this <code>frequencies.sort_by { |k, v| v}</code> code?!
</p>




<p>
  It's actually really easy to understand if you look at another example of how the <code>sort_by</code> method is used in hashes.
</p>




<h3>First, what are hashes?</h3>




<p>
  Hashes consist of keys and values. For example, we could have a <code>people</code> hash that contains information about a person's name and their age.
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:fred</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
  <span class="ss">:joan</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">,</span>
  <span class="ss">:pete</span> <span class="o">=&gt;</span> <span class="mi">54</span>
<span class="p">}</span></code></pre></figure></p>

<p>
  Inside the <code>people</code> hash, we have 3 sets of keys and values. <code>:fred</code>, <code>:joan</code>, <code>:pete</code> are all keys, and <code>23</code>, <code>18</code>, and <code>54</code> are all values.
</p>




<p>
  Hashes are really nice because you can get the value of a key really quickly. For example, if we wanted to find out the age of <code>:fred</code>, all we have to do is this:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span><span class="o">[</span><span class="ss">:fred</span><span class="o">]</span>
<span class="c1"># =&gt; 23</span></code></pre></figure></p>

<p>
  It's hard to do the same thing with arrays, so hashes are very useful.
</p>


<p></p>

<p>
  However, what if we want to sort the hash? What if we want to sort the hash by the name or the age?
</p>




<p>
  This is where the <code>.sort_by</code> method is handy :) Take a look at the code below:
</p>


<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">people</span> <span class="o">=</span> <span class="p">{</span>
  <span class="ss">:fred</span> <span class="o">=&gt;</span> <span class="mi">23</span><span class="p">,</span>
  <span class="ss">:joan</span> <span class="o">=&gt;</span> <span class="mi">18</span><span class="p">,</span>
  <span class="ss">:pete</span> <span class="o">=&gt;</span> <span class="mi">54</span>
<span class="p">}</span></p>

<p><span class="n">people</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="o">|</span> <span class="n">age</span> <span class="p">}</span>
  <span class="c1"># =&gt; [[:joan, 18], [:fred, 23], [:pete, 54]]</span></p>

<p><span class="n">people</span><span class="o">.</span><span class="n">sort_by</span> <span class="p">{</span> <span class="o">|</span><span class="nb">name</span><span class="p">,</span> <span class="n">age</span><span class="o">|</span> <span class="nb">name</span> <span class="p">}</span>
  <span class="c1"># =&gt; [[:fred, 23], [:joan, 18], [:pete, 54]]</span></code></pre></figure></p>

<p>
  <code>people.sort_by { |name, age| age }</code> -> here we are sorting the <code>people</code> hash by each person's <code>age</code>.
</p>




<p>
  <code>people.sort_by { |name, age| name }</code> -> here we are sorting the <code>people</code> hash by each person's <code>name</code>.
</p>




<p> 
  By looking at this example, hopefully all of the sudden the mystery of <code>frequencies.sort_by { |k, v| v}</code> is solved :)
</p>


<p></p>

<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">.split method</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/.split-method.html" />
  <id>https://www.takehiromouri.com/.split-method</id>
  <published>2016-08-04T00:00:00Z</published>
  <updated>2016-08-04T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>
  I've had some students ask me about the <code>.split</code> method in ruby :D
</p>




<p>
  Here's a brief rundown of how it works. Hopefully the examples do a good job of explaining what it does :)
</p>


<p></p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">momos</span> <span class="o">=</span> <span class="s2">&quot;I love momos&quot;</span>
<span class="n">momos</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot; &quot;</span><span class="p">)</span>
<span class="c1"># =&gt; [&quot;I&quot;, &quot;love&quot;, &quot;momos&quot;]</span>
<span class="c1"># returns an array of strings seperated by &quot; &quot;</span></p>

<p><span class="n">string_2</span> <span class="o">=</span> <span class="s2">&quot;A, bc, def, ghi&quot;</span>
<span class="n">string_2</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;,&quot;</span><span class="p">)</span>
<span class="c1"># =&gt; [&quot;A&quot;, &quot; bc&quot;, &quot; def&quot;, &quot; ghi&quot;]</span>
<span class="c1"># here, we are splitting the array with &quot;,&quot;</span>
<span class="c1"># then we are storing them in an array</span></p>

<p><span class="n">string_3</span> <span class="o">=</span> <span class="s2">&quot;abcdefgabcdefg&quot;</span>
<span class="n">string_3</span><span class="o">.</span><span class="n">split</span><span class="p">(</span><span class="s2">&quot;a&quot;</span><span class="p">)</span>
<span class="c1"># =&gt; [&quot;&quot;, &quot;bcdefg&quot;, &quot;bcdefg&quot;]</span>
<span class="c1"># here, we are splitting the array by &quot;a&quot;, so we get this result</span></code></pre></figure></p>

<p><small>Originally posted in TECHRISE Community at www.techrise.me</small></p>
 ]]></content>
</entry>


  <entry>
  <title type="text">How to Count Belonging Objects More Efficiently in Rails</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/How-to-Count-Belonging-Objects-More-Efficiently-in-Rails.html" />
  <id>https://www.takehiromouri.com/How-to-Count-Belonging-Objects-More-Efficiently-in-Rails</id>
  <published>2016-04-01T00:00:00Z</published>
  <updated>2016-04-01T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>A lot of times when writing rails apps, you face a situation where you have to count the number of child objects a parent object has.</p>

<p>For instance, let&rsquo;s say we have a <code>User</code> model and a <code>Comment</code> model where <code>User</code> <code>has_many :comments</code> and <code>Comment</code> <code>belongs_to :user</code>.</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">User</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">has_many</span> <span class="ss">:comments</span>
<span class="k">end</span></code></pre></figure></p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span>
<span class="k">end</span></code></pre></figure></p>

<p>What do we do when we want to count the number of comments that a <code>User</code> has? A lot of times, it would look something like this:</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="n">user</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">count</span></code></pre></figure></p>

<p>This is all fine, if you&rsquo;re only using it once in a while.
But say we need to query the database often for the number of comments that a <code>User</code> has.</p>

<p>Let&rsquo;s see what the performance is like when using <code>user.comments.count</code>.
In an example app I created with the same models as above, I tested this out with a <code>user</code> with 225 <code>comments</code>:</p>

<p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">irb<span class="o">(</span>main<span class="o">)</span>:015:0&gt; User.first.comments.count
  User Load <span class="o">(</span>0.3ms<span class="o">)</span>  SELECT  <span class="s2">&quot;users&quot;</span>.<em> FROM <span class="s2">&quot;users&quot;</span>  ORDER BY <span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;id&quot;</span> ASC LIMIT 1
   <span class="o">(</span>0.4ms<span class="o">)</span>  SELECT COUNT<span class="o">(</span></em><span class="o">)</span> FROM <span class="s2">&quot;comments&quot;</span> WHERE <span class="s2">&quot;comments&quot;</span>.<span class="s2">&quot;user_id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;user_id&quot;</span>, 1<span class="o">]]</span>
<span class="o">=</span>&gt; 225</code></pre></figure></p>

<p>Notice how the <code>comments</code> are queried with a COUNT(*) query. If we were to query 100 users at once for <code>comments.count</code>, it would be a big load for the database.</p>

<p>Here&rsquo;s how we can avoid the COUNT(*) query and improve performance:</p>

<h2>Introducing <code>counter_cache</code></h2>


<p>Instead of querying <code>comments</code>, we can just store the number of comments a user has in the <code>User</code> table and get the number of comments without any SQL query.</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">AddCommentCounterToUser</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Migration</span>
  <span class="k">def</span> <span class="nf">change</span>
    <span class="n">add_column</span> <span class="ss">:users</span><span class="p">,</span> <span class="ss">:comments_count</span><span class="p">,</span> <span class="ss">:integer</span><span class="p">,</span> <span class="ss">default</span><span class="p">:</span> <span class="mi">0</span>
  <span class="k">end</span>
<span class="k">end</span></code></pre></figure></p>

<p>In order for <code>counter_cache</code> to work, we need to create a database column that ends with <code>_count</code>. So here, we have created a <code>comments_count</code> column that will store the number of comments inside.</p>

<p>After we run the migration, we want to initially update the <code>comments_count</code> for each <code>User</code>.</p>

<p>We can do this by creating a rake file, or manually running code in the console:</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="no">User</span><span class="o">.</span><span class="n">reset_column_information</span>
<span class="no">User</span><span class="o">.</span><span class="n">all</span><span class="o">.</span><span class="n">each</span> <span class="k">do</span> <span class="o">|</span><span class="n">user</span><span class="o">|</span>
  <span class="no">User</span><span class="o">.</span><span class="n">update_counters</span> <span class="n">user</span><span class="o">.</span><span class="n">id</span><span class="p">,</span> <span class="ss">comments_count</span><span class="p">:</span> <span class="n">user</span><span class="o">.</span><span class="n">comments</span><span class="o">.</span><span class="n">length</span>
<span class="k">end</span></code></pre></figure></p>

<p><code>reset_column_information</code> resets all the cached information about columns, and will be reloaded before the code below runs.</p>

<p>Now after we run this code, we see that the correct number of comments are stored in the user object:</p>

<p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">irb<span class="o">(</span>main<span class="o">)</span>:005:0&gt; <span class="nv">user</span>
<span class="o">=</span>&gt; <span class="c">#&lt;User id: 1, name: &quot;Bob&quot;, created_at: &quot;2016-04-01 06:51:53&quot;, updated_at: &quot;2016-04-01 07:37:39&quot;, comments_count: 225&gt;</span></code></pre></figure></p>

<p>One more thing we need to do:</p>

<p>In the <code>Comment</code> model, we need to set <code>counter_cache: true</code>.</p>

<p><figure class="highlight"><pre><code class="language-ruby" data-lang="ruby"><span class="k">class</span> <span class="nc">Comment</span> <span class="o">&lt;</span> <span class="no">ActiveRecord</span><span class="o">::</span><span class="no">Base</span>
  <span class="n">belongs_to</span> <span class="ss">:user</span><span class="p">,</span> <span class="ss">counter_cache</span><span class="p">:</span> <span class="kp">true</span>
<span class="k">end</span></code></pre></figure></p>

<p>This will increment and decrement the <code>comments_count</code> column automatically in <code>User</code> whenever a comment is created or deleted.</p>

<p>Let&rsquo;s test this out:</p>

<p><figure class="highlight"><pre><code class="language-bash" data-lang="bash">irb<span class="o">(</span>main<span class="o">)</span>:006:0&gt; user.comments.create<span class="o">(</span>text: <span class="s2">&quot;hello&quot;</span><span class="o">)</span>
   <span class="o">(</span>1.7ms<span class="o">)</span>  begin transaction
  SQL <span class="o">(</span>1.9ms<span class="o">)</span>  INSERT INTO <span class="s2">&quot;comments&quot;</span> <span class="o">(</span><span class="s2">&quot;text&quot;</span>, <span class="s2">&quot;user_id&quot;</span>, <span class="s2">&quot;created_at&quot;</span>, <span class="s2">&quot;updated_at&quot;</span><span class="o">)</span> VALUES <span class="o">(</span>?, ?, ?, ?<span class="o">)</span>  <span class="o">[[</span><span class="s2">&quot;text&quot;</span>, <span class="s2">&quot;hello&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;user_id&quot;</span>, 1<span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;created_at&quot;</span>, <span class="s2">&quot;2016-04-02 18:27:36.897717&quot;</span><span class="o">]</span>, <span class="o">[</span><span class="s2">&quot;updated_at&quot;</span>, <span class="s2">&quot;2016-04-02 18:27:36.897717&quot;</span><span class="o">]]</span>
  SQL <span class="o">(</span>0.6ms<span class="o">)</span>  UPDATE <span class="s2">&quot;users&quot;</span> SET <span class="s2">&quot;comments_count&quot;</span> <span class="o">=</span> COALESCE<span class="o">(</span><span class="s2">&quot;comments_count&quot;</span>, 0<span class="o">)</span> + <span class="m">1</span> WHERE <span class="s2">&quot;users&quot;</span>.<span class="s2">&quot;id&quot;</span> <span class="o">=</span> ?  <span class="o">[[</span><span class="s2">&quot;id&quot;</span>, 1<span class="o">]]</span>
   <span class="o">(</span>5.9ms<span class="o">)</span>  commit <span class="nv">transaction</span>
<span class="o">=</span>&gt; <span class="c">#&lt;Comment id: 225, user_id: 1, text: &quot;hello&quot;, created_at: &quot;2016-04-02 18:27:36&quot;, updated_at: &quot;2016-04-02 18:27:36&quot;&gt;</span>
irb<span class="o">(</span>main<span class="o">)</span>:007:0&gt; user.comments_count
<span class="o">=</span>&gt; 226</code></pre></figure></p>

<p>Awesome! As you can see, it properly incremented the <code>comments_count</code> from <code>225</code> to <code>226</code>.</p>

<p>Using <code>counter_cache</code> can increase performance when you are trying to display, for instance, many users and their comment counts. Instead of making a bunch of COUNT(*) queries, by using <code>counter_cache</code>, you can access the same information by just accessing a column in the <code>User</code> table.</p>
 ]]></content>
</entry>


  <entry>
  <title type="text">My Approach to Achieving Deep Focus</title>
  <link rel="alternate" type="text/html" href="https://www.takehiromouri.com/Entering-Zen-Mode.html" />
  <id>https://www.takehiromouri.com/Entering-Zen-Mode</id>
  <published>2016-03-30T00:00:00Z</published>
  <updated>2016-03-30T00:00:00Z</updated>
  <content type="html"><![CDATA[ <p>If you ever want to get good at something, Iâm a firm believer of going into what I like to call <strong>âZen Modeâ</strong>. Some people call it <i>âthe state of flowâ</i>, some people call it <i>âdeep focusâ</i>, other people call it other things.</p>

<p>I get the most things done when Iâm in my Zen Mode.</p>

<p><strong>If Iâm not in my Zen Mode, Iâm distracted, Iâm unfocused, and Iâm wasting my time.</strong></p>

<h1>First I ask myself: Do I like what Iâm doing?</h1>

<p>First things first, I find that <strong>if I donât like what Iâm learning or doing, Iâm never able to enter Zen Mode.</strong></p>

<p>So if Iâm trying to enter Zen Mode in something I just donât enjoy or care about, then <strong>Iâm a strong believer in picking up something else instead.</strong></p>

<h1>Locking Myself Up = Deep Focus</h1>

<p>One of my friends who I consider to be a genius mathematician once told me this:</p>

<p><i>&ldquo;The only way you can improve on things is to lock yourself up in a room and practice.&rdquo;</i></p>

<p>This might be a super asian way of thinking of thingsâ(I&rsquo;m asian) ââ<strong>BUT</strong> it has a lot of truths to it, especially if itâs a skill set in which individual work is important.</p>

<p>How does one become a great artist? A great engineer?</p>

<p><strong>Most likely through hours of practice alone.</strong></p>

<p>Whenever Iâm trying to improve a skill, often times the best bet is to really immerse myself in the activity.</p>

<p>And <strong>to immerse myself in the activity, I canât have other people around me, or have other distractions.</strong></p>

<h2>But itâs difficult when you have friends, social pressures, and obligations.</h2>

<p><strong>Itâs also hard to say no.</strong></p>

<p>It was personally difficult for me to turn down invitations from my friends to go out and get drunkâââ<strong>but after my mathematician friend gave me his perspective, it made me feel fine about not always going out or being social.</strong></p>

<p>Social pressures can work for people or it can work against people. Since my friend encouraged me to feel okay about being a nerd, I&rsquo;ve encouraged my friends to do so as well.</p>

<p>This kind of creates an eco system where our group of friends can freely be nerds and be okay about it, and it works great.</p>

<p>If you&rsquo;re one of these people or want to make yourself feel better about being a nerd, please do message me and I will be super happy of making another hardworking nerdy friend.</p>
 ]]></content>
</entry>



</feed>
